<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Limon's Blog]]></title>
  <link href="http://limon.top/atom.xml" rel="self"/>
  <link href="http://limon.top/"/>
  <updated>2016-02-23T11:58:44+08:00</updated>
  <id>http://limon.top/</id>
  <author>
    <name><![CDATA[Limon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[译] 揭秘控制器视图的加载过程]]></title>
    <link href="http://limon.top/controller-load-process/"/>
    <updated>2016-02-02T04:20:57+08:00</updated>
    <id>http://limon.top/controller-load-process</id>
    <content type="html"><![CDATA[<p>原文链接:
<a href="http://szulctomasz.com/ios-uiviewcontrollers-view-loading-process-demystified/">iOS: UIViewController’s view loading process demystified</a></p>

<p><a href="https://twitter.com/NatashaTheRobot">@NatashaTheRobot</a>在她的博客里发过一篇关于测试控制器及视图加载问题的文章<a href="http://natashatherobot.com/ios-testing-view-controllers-swift/">The One Weird Trick For Testing View Controllers in Swift</a></p>

<blockquote><p>她写道：
    这里的关键是苹果重载了控制器视图的getter去调用加载视图的方法，并做了许多我们没有权限访问的其它事情。如果有谁深入了解过其中的工作原理，尽情地说出来吧。</p></blockquote>

<p>了解背后的工作原理确实是一个很有趣的事情。在她的鼓励下，我开始进行深入的探索。</p>

<p>我发现有两种情况：控制器被设置为 window 的根控制器或者 控制器不作为根控制器（例如，当你想要测试视图控制器，并从 Storyboard 中实例化了一个时）</p>

<h2>控制器作为根控制器</h2>

<pre><code>if self.window == nil {
    self.window = UIWindow(frame: UIScreen.mainScreen().bounds)
}

let storyboard = UIStoryboard(name: "Main", bundle: NSBundle.mainBundle())
let vc = storyboard.instantiateViewControllerWithIdentifier("ViewController")
self.window!.rootViewController = vc
</code></pre>

<p>比如说，这部分程序流运行在 <code>-application:DidFinishLaunchingWithOptions:</code> 方法中，
<img src="http://szulctomasz.com/wp-content/uploads/2015/08/ex-1.png" alt="" />
<code>UIWindow</code> 的 <code>-makeKeyAndVisible</code> 是第一个被调用的方法，此方法调用了 UIWindow 的私有方法 <code>-addRootViewControllerViewIfPossible</code> 去为其根控制器添加 view，并显示出来。<code>UIWindow</code>  获取根控制器的 <code>view</code> 属性之后，就开始了视图加载的一系列过程，首先被调用的方法是 <code>-loadViewIfRequired</code>，此方法再调用 <code>-loadView</code> 方法。<code>-loadView</code> 方法调用 <code>UIViewController</code> 的的内部方法来加载 Nib 以达到设置视图的目的。</p>

<p>今年（2015年）的 WWDC 上有个非常好的演讲，介绍了 <code>storyboard</code> 及 <code>nibs</code> 在运行时是如何运作的。<a href="https://developer.apple.com/videos/wwdc/2015/?id=407">Implementing UI Design in Interface Builder</a></p>

<p>在 <code>loadView</code> 设置好后，控制器调用它内部的方法 <code>-_window</code>，并读取了诸如<code>preferedInterfaceOrientation</code>、<code>supportedInterfaceOrientations</code>、<code>shouldAutorotate</code>的许多设置。事实上，控制器调用了 <code>-_window</code> 许多次，此外也调用了许多其它方法。</p>

<p>接着，<code>-viewDidLoad</code> 方法被调用，私有 <code>-__viewWillAppear</code> 调用 <code>-viewWillAppear</code>。视图即将被呈现出来，所以 <code>-willMoveToWindow:</code> <code>-willMoveToSuperview:</code> 和私有 <code>-_didMoveFromWindow:toWindow:</code> 等方法被调用。</p>

<p>下一步是为视图作自动布局，所以 <code>layoutMarginsDidChange, didMoveToWindow, didMoveToSuperview, updateViewConstraints, updateConstraints, layoutSublayersOfLayer, viewWillLayoutSubviews, layoutSubviews</code> 等一系列方法被调用</p>

<p>最后，<code>-viewDidAppear:</code>被调用了，视图也呈现出来了。</p>

<h4>.</h4>

<h2>普通控制器的加载测试</h2>

<p>这是另外一个值得去研究的重要情况。在这种情况下，你不用创建 <code>window</code> 并把你的 <code>view controller</code> 加到其上来进行测试，只需要通过storyboard创建控制器的实例以进行测试。在看了 Natasha 的文章之前，我只知道直接通过访问控制器的 <code>view</code> 属性来获取视图。现在我知道在 iOS9 之后，<code>-loadViewIfNeeded</code> 方法和访问属性 <code>view</code> 的行为是一样的。并且在<a href="https://github.com/orta">Ørta</a>的推荐下，我知道了两个更好的方法 去测试控制器视图的加载并确保其可用。<code>-beginAppearanceTransition:animated</code> 和 <code>-endApperanceTransition</code>。<a href="https://github.com/artsy/eigen/blob/master/Artsy_Tests/Extensions/UIViewController+PresentWithFrame.m#L20-L22">这是他推荐的方法</a></p>

<h3>直接访问View属性</h3>

<p>让我们看看直接访问 <code>view</code> 时的情况。</p>

<pre><code>let storyboard = UIStoryboard(name: "Main", bundle: NSBundle.mainBundle())
let vc = storyboard.instantiateViewControllerWithIdentifier("ViewController")
_ = vc.view
</code></pre>

<p><img src="http://szulctomasz.com/wp-content/uploads/2015/08/ex-2.png" alt="" /></p>

<p>好吧，许多方法没被调用。<code>window</code> 为 <code>nil</code>，视图可以被访问和加载，图上的加载过程却在 <code>-viewDidLoad</code> 中就结束了，所以我认为还有许多方法没被找出来。</p>

<p>让我们看看 <code>-beginApperanceTransition:animated:</code> 是怎样工作的。</p>

<h3>beginApperanceTransition:animated</h3>

<pre><code>let storyboard = UIStoryboard(name: "Main", bundle: NSBundle.mainBundle())
let vc = storyboard.instantiateViewControllerWithIdentifier("ViewController")
vc.beginAppearanceTransition(true, animated: false)
vc.endAppearanceTransition()
</code></pre>

<p><img src="http://szulctomasz.com/wp-content/uploads/2015/08/ex-3.png" alt="" /></p>

<p>非常好，这次的加载过程比第一个要详细。可以看到，这里 <code>window</code> 同样是 <code>nil</code>，所以控制器的视图，没有出现在加载过程中，也没有设置布局的代码在运行，仅仅是控制器的一些设置。</p>

<blockquote><p>译者：这里可能很难理解，可以结合本文的三个图，图都是分三列，分别为 <code>UIWindow</code>、<code>UIViewController</code>、<code>UIView</code>，这里说 <code>window</code> 同样是 <code>nil</code> 的意思是，<code>UIWindow</code> 列没出现东西，原因是控制器不是根控制器，这里仅仅测试单独一个控制器。作者在这里想表达的意思是</p></blockquote>

<h2>总结</h2>

<p>现在应该知道，视图的加载过程取决于控制器的上下文。</p>

<p>在第一个例子中，控制器作为根控制器，所以控制器和视图都进行了许多设置。</p>

<p>在最后的一个例子中，因为没有 <code>UIWindow</code>，只有控制器初始化了，连视图也没有初始化的需要 必要。这种情况就类似于模拟 <code>present</code> 一个控制器，因此 <code>-viewWillAppear</code> 和 <code>-viewDidAppear</code> 方法被调用了。这在某些情况下或许很重要。</p>

<p>最后，我要再谈谈第二个例子。
在不知道 <code>-beginApperanceTransition:animated</code> 之前，我以为 viewWill/viewDid 会被调用，但是并没有，就如以上图二所示。Ørta 提供的方法可能是测试控制器的最好途径之一。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Realm Thread 浅析]]></title>
    <link href="http://limon.top/RealmThread/"/>
    <updated>2016-01-14T02:27:14+08:00</updated>
    <id>http://limon.top/RealmThread</id>
    <content type="html"><![CDATA[<p>两个同一：同一个 realm、同一个线程，两者缺一不可。</p>

<p>打开 App，首先从 Realm 中获取首页的数据，此时在 <strong>主线程</strong> 调用 <code>-fetchArticlesFromRealmByType(.Home)</code>，此方法返回一个元组： <code>result: (articles: [Article], articleObjects: [ArticleObject])</code>，前者是模型，后者是 Realm 的 <code>Object</code>。</p>

<p>然后再进行网络请求，网络请求完之后，<strong>主线程</strong> 更新 UI，并保存数据最新的数据和删除旧的数据（[ArticleObject]）。
保存数据直接可以实例化一个 Realm，所以不需要考虑 <strong>两个同一</strong>。</p>

<p>重点讲删除数据的两个同一：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">fetchArticlesFromRealmByType</span><span class="p">(</span><span class="nl">articleType</span><span class="p">:</span> <span class="n">ArticleType</span><span class="p">,</span> <span class="nl">result</span><span class="p">:</span> <span class="p">(</span><span class="nl">articles</span><span class="p">:</span> <span class="p">[</span><span class="n">Article</span><span class="p">],</span> <span class="nl">articleObjects</span><span class="p">:</span> <span class="p">[</span><span class="n">ArticleObject</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 省略部分代码...</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 成功从本地数据库中获取数据之后，在 **主线程*** 回调，在外面更新 UI，并持有 articleObjects，待网络请求完，删除此 articleObjects</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">articleRealmObjects</span> <span class="o">=</span> <span class="n">realm</span><span class="p">.</span><span class="n">objects</span><span class="p">(</span><span class="n">ArticleObject</span><span class="p">)</span>
</span><span class='line'>  <span class="n">result</span><span class="p">(</span><span class="nl">articles</span><span class="p">:</span> <span class="n">articles</span><span class="p">,</span> <span class="nl">articleObjects</span><span class="p">:</span> <span class="n">articleRealmObjects</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 注意，Object 不能切换线程，意思就是说，你如果在 Background 线程得到 articleRealmObjects，不能再切换到主线程回调出去，推荐使用通知。</span>
</span><span class='line'>  <span class="n">Queue</span><span class="p">.</span><span class="n">Background</span><span class="p">.</span><span class="n">execute</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">articleRealmObjects</span> <span class="o">=</span> <span class="n">realm</span><span class="p">.</span><span class="n">objects</span><span class="p">(</span><span class="n">ArticleObject</span><span class="p">)</span>
</span><span class='line'>    <span class="n">Queue</span><span class="p">.</span><span class="n">Main</span><span class="p">.</span><span class="n">execute</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">result</span><span class="p">(</span><span class="nl">articles</span><span class="p">:</span> <span class="n">articles</span><span class="p">,</span> <span class="nl">articleObjects</span><span class="p">:</span> <span class="n">articleRealmObjects</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">deleteObject</span><span class="p">(</span><span class="nl">articleObjects</span><span class="p">:</span> <span class="p">[</span><span class="n">ArticleObject</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">guard</span> <span class="k">let</span> <span class="n">articleObjects</span> <span class="o">=</span> <span class="n">articleObjects</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">_</span> <span class="o">=</span> <span class="n">try</span><span class="o">?</span> <span class="n">articleObjects</span><span class="p">.</span><span class="n">first</span><span class="o">?</span><span class="p">.</span><span class="n">realm</span><span class="o">?</span><span class="p">.</span><span class="n">write</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">articleObjects</span><span class="p">.</span><span class="n">first</span><span class="o">?</span><span class="p">.</span><span class="n">realm</span><span class="o">?</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">articleObjects</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>同一个线程</h3>

<p>待网络请求完后，想要删除旧的 <code>articleObjects</code>，应该在 <code>articleObjects</code> 同一线程内删除，在此例子中，<code>articleObjects</code> 是从 <code>Queue.Main</code> 中得到，那删除时也要在此线程删除，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">Queue</span><span class="p">.</span><span class="n">Main</span><span class="p">.</span><span class="n">execute</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="s">&quot;delete action on thread: \(NSThread.currentThread())&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">deleteObject</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">articleObjects</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果打印出来的内存地址和在 <code>-fetchArticlesFromRealmByType(.Home)</code> 打印的不同，此时就会 Crash: <code>Realm accessed from incorrect thread.</code></p>

<blockquote><p>如果是在串行队列中，需要持有此队列，就算 <code>-dispatch_queue_create(key, _)</code> 中的 key 每次创建都是同一个 key，也不能保证所有串行任务都在同一个队列对象中。</p></blockquote>

<h3>同一个 realm</h3>

<p>可以直接从 <code>ArticleObject</code> 获取 <code>realm</code>，前提是数组内所有的 Object 都是在同一个 <code>realm</code> 内。(还没遇到过，一个数组内放不同 realm 的 Object 这样变态的需求 -.- )</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">_</span> <span class="o">=</span> <span class="n">try</span><span class="o">?</span> <span class="n">articleObjects</span><span class="p">.</span><span class="n">first</span><span class="o">?</span><span class="p">.</span><span class="n">realm</span><span class="o">?</span><span class="p">.</span><span class="n">write</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">articleObjects</span><span class="p">.</span><span class="n">first</span><span class="o">?</span><span class="p">.</span><span class="n">realm</span><span class="o">?</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">articleObjects</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里值得注意的是，删除了此 <code>articleObject</code>之后，如果你还访问了此对象的自定义属性，就会 Crash: <code>Object has been deleted or invalidated.</code></p>

<p>例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">_</span> <span class="o">=</span> <span class="n">try</span><span class="o">?</span> <span class="n">articleObject</span><span class="p">.</span><span class="n">realm</span><span class="o">?</span><span class="p">.</span><span class="n">write</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">articleObject</span><span class="p">.</span><span class="n">realm</span><span class="o">?</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">objects</span><span class="p">)</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="n">articleObject</span><span class="p">.</span><span class="n">title</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为 <code>articleObject</code> 已经无效了，因此稳妥点，在访问前先判断此 <code>Object</code> 的有效性。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">deleteObject</span><span class="p">(</span><span class="nl">articleObjects</span><span class="p">:</span> <span class="p">[</span><span class="n">ArticleObject</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">guard</span> <span class="k">let</span> <span class="n">articleObject</span> <span class="o">=</span> <span class="n">articleObjects</span><span class="p">.</span><span class="n">first</span> <span class="k">where</span> <span class="o">!</span><span class="n">articleObject</span><span class="p">.</span><span class="n">invalidated</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="n">articleObject</span><span class="p">.</span><span class="n">realm</span><span class="o">?</span><span class="p">.</span><span class="n">isEmpty</span> <span class="o">??</span> <span class="nb">true</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">_</span> <span class="o">=</span> <span class="n">try</span><span class="o">?</span> <span class="n">articleObject</span><span class="p">.</span><span class="n">realm</span><span class="o">?</span><span class="p">.</span><span class="n">write</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">articleObject</span><span class="p">.</span><span class="n">realm</span><span class="o">?</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">objects</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 <a href="http://nshipster.com/new-years-2016/#swiftier-gcd">NSHipster</a> 找到的 GCD 封装</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">protocol</span> <span class="n">ExcutableQueue</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">queue</span><span class="p">:</span> <span class="kt">dispatch_queue_t</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">extension</span> <span class="n">ExcutableQueue</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">execute</span><span class="p">(</span><span class="nl">closure</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="n">closure</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">enum</span> <span class="nl">Queue</span><span class="p">:</span> <span class="n">ExcutableQueue</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Main</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">UserInteractive</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">UserInitiated</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Utility</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Background</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">queue</span><span class="p">:</span> <span class="kt">dispatch_queue_t</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="nb">self</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">Main</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">dispatch_get_main_queue</span><span class="p">()</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">UserInteractive</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">QOS_CLASS_USER_INTERACTIVE</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">UserInitiated</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">QOS_CLASS_USER_INITIATED</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">Utility</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">QOS_CLASS_UTILITY</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">Background</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">QOS_CLASS_BACKGROUND</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debug 模式与 Release 模式的区分]]></title>
    <link href="http://limon.top/debugbuild/"/>
    <updated>2016-01-08T11:31:30+08:00</updated>
    <id>http://limon.top/debugbuild</id>
    <content type="html"><![CDATA[<h1>Debug 模式与 Release 模式的区分</h1>

<p><br />
区分 Debug 模式与 Release 模式有两种方法，此文的目的是告诉读者尽量避免用 <code>-DDEBUG</code>。</p>

<h4>第一种方法：</h4>

<p>在 (Build Settings -> Swift Compiler - Custom Flags) 中加入 <code>-DDEBUG</code>，
<a href="http://stackoverflow.com/questions/24111854/in-absence-of-preprocessor-macros-is-there-a-way-to-define-practical-scheme-spe/#answer-24112024">Stackoverflow</a>。</p>

<p><img src="http://i.stack.imgur.com/dqp5H.png" alt="" /></p>

<p>但是在 NSHipster 中有提到<strong><em>不推荐</em></strong>此方法  <a href="http://nshipster.com/new-years-2016/#avoiding--ddebug-in-swift">Avoiding -DDEBUG in Swift</a></p>

<p><br /></p>

<h4>第二种方法</h4>

<p>通过 Preprocessor Macros (预处理宏命令) 来区分模式。</p>

<p><br /></p>

<p>1.新建一个 <code>PreProcessorMacros.h</code> 文件，代码如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">PreProcessorMacros</span> : <span class="bp">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifndef PreProcessorMacros_h</span>
</span><span class='line'><span class="cp">#define PreProcessorMacros_h</span>
</span><span class='line'>
</span><span class='line'><span class="k">extern</span> <span class="kt">BOOL</span> <span class="k">const</span> <span class="n">DEBUG_BUILD</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">PreProcessorMacros</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef DEBUG</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="k">const</span> <span class="n">DEBUG_BUILD</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="k">const</span> <span class="n">DEBUG_BUILD</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<p>2.在 Bridged Header: <code>#import "PreProcessorMacros.h"</code></p>

<blockquote><p>也可直接把步骤一的代码放进 Bridged Header</p></blockquote>

<p><br /></p>

<p>3.测试</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">if</span> <span class="n">DEBUG_BUILD</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;It&#39;s Debug build&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;It&#39;s Release build&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>⌘⇧&lt;</strong> 进入下图可模式切换</p>

<p><img src="https://raw.githubusercontent.com/Limon-O-O/DEBUGBUILD/master/images/switch.png" alt="" /></p>

<p><br /></p>

<h2>原理</h2>

<p>关键的代码在：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="cp">#ifdef DEBUG</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="k">const</span> <span class="n">DEBUG_BUILD</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="k">const</span> <span class="n">DEBUG_BUILD</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>此处的 <code>DEBUG</code> 究竟来自哪？</p>

<p>进入 &lsquo;Build Settings&rsquo; -> 搜索 &lsquo;Preprocessor Macros&#8217;，真相大白</p>

<p><img src="https://raw.githubusercontent.com/Limon-O-O/DEBUGBUILD/master/images/PreprocessorMacros.png" alt="" /></p>

<p><br />
源码：<a href="https://github.com/Limon-O-O/DEBUGBUILD">DEBUGBUILD</a></p>

<p>抽取于干货极多的：<a href="http://nshipster.com/new-years-2016/">Reader Submissions -
New Year&rsquo;s 2016</a>  🍺</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[花式自定义下标]]></title>
    <link href="http://limon.top/subscriptswift/"/>
    <updated>2016-01-05T17:56:42+08:00</updated>
    <id>http://limon.top/subscriptswift</id>
    <content type="html"><![CDATA[<h1>花式自定义下标</h1>

<h3>一、枚举作 Key</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">dictionaryOne</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="n">MyDictionaryKeys</span><span class="p">.</span><span class="n">Name</span><span class="p">.</span><span class="nl">rawValue</span><span class="p">:</span> <span class="s">&quot;Limon&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">MyDictionaryKeys</span><span class="p">.</span><span class="n">Age</span><span class="p">.</span><span class="nl">rawValue</span><span class="p">:</span> <span class="n">Int</span><span class="p">(</span><span class="mi">18</span><span class="p">)</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="k">let</span> <span class="n">name</span> <span class="o">=</span> <span class="n">dictionaryOne</span><span class="p">[.</span><span class="n">Name</span><span class="p">]</span><span class="o">!</span>
</span><span class='line'><span class="k">let</span> <span class="n">age</span> <span class="o">=</span> <span class="n">dictionaryOne</span><span class="p">[.</span><span class="n">Age</span><span class="p">]</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">enum</span> <span class="nl">MyDictionaryKeys</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Name</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Age</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">extension</span> <span class="n">Dictionary</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">subscript</span><span class="p">(</span><span class="nl">customKey</span><span class="p">:</span> <span class="n">MyDictionaryKeys</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">AnyObject</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">guard</span> <span class="k">let</span> <span class="n">key</span> <span class="o">=</span> <span class="n">customKey</span><span class="p">.</span><span class="n">rawValue</span> <span class="kt">as</span><span class="o">?</span> <span class="n">Key</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="nb">self</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">key</span> <span class="o">==</span> <span class="n">k</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">value</span> <span class="kt">as</span><span class="o">?</span> <span class="n">String</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">extension</span> <span class="bp">NSDictionary</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">subscript</span><span class="p">(</span><span class="nl">customKey</span><span class="p">:</span> <span class="n">MyDictionaryKeys</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">AnyObject</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">objectForKey</span><span class="p">(</span><span class="n">customKey</span><span class="p">.</span><span class="n">rawValue</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<h3>二、声明 Key 时，同时定义 Value 的类型</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">userID</span> <span class="o">=</span> <span class="n">dictionaryTwo</span><span class="p">[.</span><span class="n">tip_UserIDKey</span><span class="p">]</span><span class="o">!</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">userID</span> <span class="kt">is</span> <span class="n">Int</span><span class="p">)</span> <span class="c1">// Always true</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="n">DictionaryKeys</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">let</span> <span class="n">tip_UserIDKey</span> <span class="o">=</span> <span class="n">DictionaryKey</span><span class="o">&lt;</span><span class="n">Int</span><span class="o">?&gt;</span><span class="p">(</span><span class="s">&quot;userID&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="bp">NSDictionary</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">subscript</span><span class="p">(</span><span class="nl">key</span><span class="p">:</span> <span class="n">DictionaryKey</span><span class="o">&lt;</span><span class="n">String</span><span class="o">?&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">objectForKey</span><span class="p">(</span><span class="n">key</span><span class="p">.</span><span class="n">value</span><span class="p">)</span> <span class="kt">as</span><span class="o">?</span> <span class="n">String</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">subscript</span><span class="p">(</span><span class="nl">key</span><span class="p">:</span> <span class="n">DictionaryKey</span><span class="o">&lt;</span><span class="n">Int</span><span class="o">?&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">objectForKey</span><span class="p">(</span><span class="n">key</span><span class="p">.</span><span class="n">value</span><span class="p">)</span> <span class="kt">as</span><span class="o">?</span> <span class="n">Int</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="n">DictionaryKeys</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">private</span> <span class="k">init</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="n">DictionaryKey</span><span class="o">&lt;</span><span class="n">ValueType</span><span class="o">&gt;:</span> <span class="n">DictionaryKeys</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="nl">value</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">init</span><span class="p">(</span><span class="n">_</span> <span class="nl">key</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">key</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<h3>三、用枚举获取 Set 的元素</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">qqAccount</span> <span class="o">=</span> <span class="n">accountSet</span><span class="p">[.</span><span class="n">QQ</span><span class="p">]</span>
</span><span class='line'><span class="k">let</span> <span class="n">weChatAccount</span> <span class="o">=</span> <span class="n">accountSet</span><span class="p">[.</span><span class="n">WeChat</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="s">&quot;样式三、qqAppID: \(qqAccount!.appID)  weChatAppID: \(weChatAccount!.appID)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<p>源码：<a href="https://github.com/Limon-catch/SubscriptSwift">SubscriptSwift</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matching Option]]></title>
    <link href="http://limon.top/matching-option/"/>
    <updated>2015-12-23T22:36:43+08:00</updated>
    <id>http://limon.top/matching-option</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "articles": [
</span><span class='line'>        {
</span><span class='line'>            "type": "app", // AppSo文章
</span><span class='line'>            "cellHeight": "100"
</span><span class='line'>        },
</span><span class='line'>        {
</span><span class='line'>            "type": "number", // 数独文章
</span><span class='line'>            "cellHeight": "200"
</span><span class='line'>        },
</span><span class='line'>        {
</span><span class='line'>            "type": "mindStore", // MindStore文章
</span><span class='line'>            "cellHeight": "300"
</span><span class='line'>        }
</span><span class='line'>    ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>假设服务器返回以上的JSON，客户端需要根据文章类型来作不同的布局。</p>

<p>第一时间可能会想到以下的方法来switch：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">let</span> <span class="n">typeString</span> <span class="o">=</span> <span class="s">&quot;app&quot;</span>
</span><span class='line'><span class="k">switch</span> <span class="n">typeString</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="s">&quot;app&quot;</span><span class="o">:</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;AppSo Article&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="s">&quot;number&quot;</span><span class="o">:</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Number Article&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">default</span><span class="o">:</span>
</span><span class='line'>    <span class="k">break</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<p>较为优雅的方法是用<code>enum</code>来管理类型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">enum</span> <span class="nl">Occupation</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">AppSo</span> <span class="o">=</span> <span class="s">&quot;app&quot;</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">Number</span> <span class="o">=</span> <span class="s">&quot;number&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">typeString</span> <span class="o">=</span> <span class="s">&quot;mindStore&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">switch</span> <span class="n">Occupation</span><span class="p">(</span><span class="nl">rawValue</span><span class="p">:</span> <span class="n">typeString</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="p">.</span><span class="n">AppSo</span><span class="o">?:</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;AppSo Article&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="p">.</span><span class="n">Number</span><span class="o">?:</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Number Article&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="nb">nil</span><span class="o">:</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Article?&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<p>抽取于：<a href="http://www.figure.ink/blog/2015/12/6/matching-with-swifts-optional-pattern?utm_campaign=This%2BWeek%2Bin%2BSwift&amp;utm_medium=web&amp;utm_source=This_Week_in_Swift_65">Matching with Swift&rsquo;s Optional Pattern</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[优雅地自定义XibView]]></title>
    <link href="http://limon.top/customxibview/"/>
    <updated>2015-12-23T21:38:17+08:00</updated>
    <id>http://limon.top/customxibview</id>
    <content type="html"><![CDATA[<h2>优雅地自定义XibView</h2>

<p>好习惯，先上<a href="https://github.com/Limon-catch/XibView">源码</a>。</p>

<p>先创建一个UIView文件和一个Xib文件，在Xib文件里设置如下，</p>

<p><img src="https://raw.githubusercontent.com/Limon-catch/XibView/master/XibView/Image/XibView_Step1.png" alt="" /></p>

<p>在UIView文件中，不是用<code>-awakeFromNib()</code>作为构造器，而是正常的<code>-init(frame: CGRect)</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kr">override</span> <span class="nf">init</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="bp">CGRect</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">super</span><span class="p">.</span><span class="k">init</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="n">frame</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">xibSetup</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而<code>-xibSetup()</code>才是关键，具体可看源码。</p>

<p><br />
如果需要UIView和Xib文件建立控件属性关联，是设置Xib文件的File`s Owner，<strong><em>而不是设置View的Custom Class</em></strong>。</p>

<p><img src="https://raw.githubusercontent.com/Limon-catch/XibView/master/XibView/Image/XibView_Step2.png" alt="" /></p>

<p>设置了File`s Owner就可以像往常一样拖线了。</p>

<p>如果想在<code>Main.storyboard</code>文件中直接使用此Xib，同时也想在SB中设置属性，那怎么使用呢？</p>

<ol>
<li>在SB中加入一个UIView，将其Class设置成<code>XibView</code><br /></li>
<li>使用<code>@IBInspectable</code></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">@</span><span class="n">IBInspectable</span> <span class="k">var</span> <span class="nl">title</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">get</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">xibLabel</span><span class="p">.</span><span class="n">text</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kr">set</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">xibLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">newValue</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><br />
添加了<code>@IBInspectable</code>之后，就可以像系统自带的控件一样设置属性了。</p>

<p><img src="https://raw.githubusercontent.com/Limon-catch/XibView/master/XibView/Image/XibView_Step3.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CheatSheet]]></title>
    <link href="http://limon.top/cheatsheet/"/>
    <updated>2015-12-23T04:22:06+08:00</updated>
    <id>http://limon.top/cheatsheet</id>
    <content type="html"><![CDATA[<h4>Swift 几种不错的遍历</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mf">1.</span><span class="p">.</span><span class="mf">.10</span> <span class="k">where</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(i) is even&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">word</span> <span class="k">in</span> <span class="p">[</span><span class="s">&quot;Lorem&quot;</span><span class="p">,</span> <span class="s">&quot;ipsum&quot;</span><span class="p">,</span> <span class="s">&quot;dolor&quot;</span><span class="p">,</span> <span class="s">&quot;sit&quot;</span><span class="p">,</span> <span class="s">&quot;amet&quot;</span><span class="p">,</span> <span class="s">&quot;consectetur&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;adipiscing&quot;</span><span class="p">,</span> <span class="s">&quot;elit&quot;</span><span class="p">]</span> <span class="k">where</span> <span class="n">word</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">5</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">print</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="s">&quot;is a long word&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nl">items</span><span class="p">:</span> <span class="p">[</span><span class="n">String</span><span class="o">?</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nb">nil</span><span class="p">,</span> <span class="nb">nil</span><span class="p">,</span> <span class="s">&quot;Hello&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">,</span> <span class="s">&quot;World&quot;</span><span class="p">]</span>
</span><span class='line'><span class="k">for</span> <span class="k">case</span> <span class="k">let</span> <span class="n">item</span><span class="o">?</span> <span class="k">in</span> <span class="n">items</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">mySwitch</span> <span class="o">=</span> <span class="bp">UISwitch</span><span class="p">()</span>
</span><span class='line'><span class="k">let</span> <span class="n">myView</span> <span class="o">=</span> <span class="bp">UIView</span><span class="p">()</span>
</span><span class='line'><span class="k">let</span> <span class="n">myDate</span> <span class="o">=</span> <span class="bp">NSDate</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nl">myItems</span><span class="p">:</span> <span class="p">[</span><span class="bp">NSObject</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">mySwitch</span><span class="p">,</span> <span class="n">myDate</span><span class="p">,</span> <span class="n">myView</span><span class="p">]</span>
</span><span class='line'><span class="k">for</span> <span class="k">case</span> <span class="k">let</span> <span class="n">item</span> <span class="kt">as</span> <span class="bp">UIView</span> <span class="k">in</span> <span class="n">myItems</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">frame</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">protocol</span> <span class="n">MyCustomProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">frame</span><span class="p">:</span> <span class="bp">CGRect</span> <span class="p">{</span><span class="kr">get</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Bar</span> <span class="p">{}</span>
</span><span class='line'><span class="k">struct</span> <span class="nl">Foo</span><span class="p">:</span> <span class="n">MyCustomProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">frame</span><span class="p">:</span> <span class="bp">CGRect</span> <span class="o">=</span> <span class="p">.</span><span class="n">zero</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">extension</span> <span class="nl">UIView</span><span class="p">:</span> <span class="n">MyCustomProtocol</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">otherItems</span> <span class="o">=</span> <span class="p">[</span><span class="n">Bar</span><span class="p">(),</span> <span class="n">Foo</span><span class="p">(),</span> <span class="bp">UIView</span><span class="p">()]</span> <span class="kt">as</span> <span class="p">[</span><span class="n">Any</span><span class="p">]</span>
</span><span class='line'><span class="k">for</span> <span class="k">case</span> <span class="k">let</span> <span class="n">item</span> <span class="kt">as</span> <span class="n">MyCustomProtocol</span> <span class="k">in</span> <span class="n">otherItems</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">frame</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<h4>字典合并</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">parameters</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="s">&quot;page&quot;</span><span class="o">:</span> <span class="s">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;offset&quot;</span><span class="o">:</span> <span class="s">&quot;20&quot;</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">params</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;type&quot;</span><span class="o">:</span> <span class="s">&quot;news&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">parameters</span><span class="p">.</span><span class="n">ifr_merge</span><span class="p">(</span><span class="n">params</span><span class="p">)</span> <span class="c1">// Output: [&quot;offset&quot;: &quot;20&quot;, &quot;type&quot;: &quot;news&quot;, &quot;page&quot;: &quot;1&quot;]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">extension</span> <span class="n">Dictionary</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">mutating</span> <span class="k">func</span> <span class="n">ifr_merge</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">dictionaries</span><span class="p">:</span> <span class="n">Dictionary</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;</span><span class="p">...)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">dict</span> <span class="k">in</span> <span class="n">dictionaries</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="n">dict</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="k">let</span> <span class="n">v</span> <span class="o">=</span> <span class="n">value</span> <span class="kt">as</span><span class="o">?</span> <span class="n">Value</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="n">key</span> <span class="kt">as</span><span class="o">?</span> <span class="n">Key</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nb">self</span><span class="p">.</span><span class="n">updateValue</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nl">forKey</span><span class="p">:</span> <span class="n">k</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<h4>优化 Cell 的使用体验</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">collectionView</span><span class="p">.</span><span class="n">registerNib</span><span class="p">(</span><span class="bp">UINib</span><span class="p">(</span><span class="nl">nibName</span><span class="p">:</span> <span class="n">NewsCell</span><span class="p">.</span><span class="n">ifr_className</span><span class="p">,</span> <span class="nl">bundle</span><span class="p">:</span> <span class="nb">nil</span><span class="p">),</span> <span class="nl">forCellWithReuseIdentifier</span><span class="p">:</span> <span class="n">NewsCell</span><span class="p">.</span><span class="n">ifr_className</span><span class="p">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">cell</span> <span class="o">=</span> <span class="n">collectionView</span><span class="p">.</span><span class="n">dequeueReusableCellWithReuseIdentifier</span><span class="p">(</span><span class="n">NewsCell</span><span class="p">.</span><span class="n">ifr_className</span><span class="p">,</span> <span class="nl">forIndexPath</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="kt">as</span><span class="o">!</span> <span class="n">NewsCell</span>
</span><span class='line'>
</span><span class='line'><span class="k">extension</span> <span class="bp">UICollectionReusableView</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">var</span> <span class="nl">ifr_className</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;\(self)&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<h4>优化 ReloadData、Insert 的使用体验</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">wayToUpdate</span><span class="p">:</span> <span class="bp">UICollectionView</span><span class="p">.</span><span class="n">WayToUpdate</span> <span class="o">=</span> <span class="p">.</span><span class="n">None</span>
</span><span class='line'><span class="n">wayToUpdate</span> <span class="o">=</span> <span class="n">page</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="p">.</span><span class="nl">ReloadData</span> <span class="p">:</span> <span class="p">.</span><span class="n">Insert</span><span class="p">(</span><span class="n">indexPaths</span><span class="p">)</span>
</span><span class='line'><span class="n">wayToUpdate</span><span class="p">.</span><span class="n">performWithCollectionView</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">collectionView</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="bp">UICollectionView</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">enum</span> <span class="n">WayToUpdate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">case</span> <span class="n">None</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">ReloadData</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">Insert</span><span class="p">([</span><span class="bp">NSIndexPath</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">var</span> <span class="nl">needsLabor</span><span class="p">:</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">switch</span> <span class="nb">self</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="p">.</span><span class="nl">None</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">false</span>
</span><span class='line'>            <span class="k">case</span> <span class="p">.</span><span class="nl">ReloadData</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">true</span>
</span><span class='line'>            <span class="k">case</span> <span class="p">.</span><span class="nl">Insert</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">true</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">func</span> <span class="n">performWithCollectionView</span><span class="p">(</span><span class="nl">collectionView</span><span class="p">:</span> <span class="bp">UICollectionView</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">switch</span> <span class="nb">self</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">case</span> <span class="p">.</span><span class="nl">None</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">break</span>
</span><span class='line'>                <span class="k">case</span> <span class="p">.</span><span class="nl">ReloadData</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">collectionView</span><span class="p">.</span><span class="n">reloadData</span><span class="p">()</span>
</span><span class='line'>                <span class="k">case</span> <span class="p">.</span><span class="n">Insert</span><span class="p">(</span><span class="k">let</span> <span class="n">indexPaths</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>                    <span class="n">collectionView</span><span class="p">.</span><span class="n">insertItemsAtIndexPaths</span><span class="p">(</span><span class="n">indexPaths</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<h4>字体的适配</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="bp">UIFont</span><span class="p">.</span><span class="n">ifr_adaptiveFont</span><span class="p">(.</span><span class="n">Regular</span><span class="p">(</span><span class="nl">fontSize</span><span class="p">:</span> <span class="mf">16.0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">enum</span> <span class="n">FontWeight</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Light</span><span class="p">(</span><span class="nl">fontSize</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Regular</span><span class="p">(</span><span class="nl">fontSize</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Medium</span><span class="p">(</span><span class="nl">fontSize</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Bold</span><span class="p">(</span><span class="nl">fontSize</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">extension</span> <span class="bp">UIFont</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="k">func</span> <span class="n">ifr_adaptiveFont</span><span class="p">(</span><span class="nl">weight</span><span class="p">:</span> <span class="n">FontWeight</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">UIFont</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">var</span> <span class="n">weightString</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="k">var</span> <span class="nl">size</span><span class="p">:</span> <span class="n">CGFloat</span> <span class="o">=</span> <span class="mf">16.0</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">switch</span> <span class="n">weight</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">case</span> <span class="p">.</span><span class="n">Light</span><span class="p">(</span><span class="k">let</span> <span class="n">fontSize</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>                <span class="n">weightString</span> <span class="o">=</span> <span class="s">&quot;-Light&quot;</span>
</span><span class='line'>                <span class="n">size</span> <span class="o">=</span> <span class="n">fontSize</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">case</span> <span class="p">.</span><span class="n">Regular</span><span class="p">(</span><span class="k">let</span> <span class="n">fontSize</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>                <span class="n">weightString</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>                <span class="n">size</span> <span class="o">=</span> <span class="n">fontSize</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">case</span> <span class="p">.</span><span class="n">Medium</span><span class="p">(</span><span class="k">let</span> <span class="n">fontSize</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>                <span class="n">weightString</span> <span class="o">=</span> <span class="s">&quot;-Medium&quot;</span>
</span><span class='line'>                <span class="n">size</span> <span class="o">=</span> <span class="n">fontSize</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">case</span> <span class="p">.</span><span class="n">Bold</span><span class="p">(</span><span class="k">let</span> <span class="n">fontSize</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>                <span class="n">weightString</span> <span class="o">=</span> <span class="s">&quot;-Bold&quot;</span>
</span><span class='line'>                <span class="n">size</span> <span class="o">=</span> <span class="n">fontSize</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">guard</span> <span class="k">let</span> <span class="n">systemFont</span> <span class="o">=</span> <span class="bp">UIFont</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="s">&quot;PingFangSC\(weightString)&quot;</span><span class="p">,</span> <span class="nl">size</span><span class="p">:</span> <span class="n">size</span><span class="p">)</span> <span class="o">??</span>
</span><span class='line'>            <span class="bp">UIFont</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="s">&quot;STHeitiSC\(weightString)&quot;</span><span class="p">,</span> <span class="nl">size</span><span class="p">:</span> <span class="n">size</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="bp">UIFont</span><span class="p">.</span><span class="n">systemFontOfSize</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">systemFont</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<h4>HTML 字符转义</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">ifr_htmlEntityDecode</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">text</span> <span class="o">=</span> <span class="n">stringByReplacingOccurrencesOfString</span><span class="p">(</span><span class="s">&quot;&amp;quot;&quot;</span><span class="p">,</span> <span class="nl">withString</span><span class="p">:</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="n">stringByReplacingOccurrencesOfString</span><span class="p">(</span><span class="s">&quot;&amp;apos;&quot;</span><span class="p">,</span> <span class="nl">withString</span><span class="p">:</span> <span class="s">&quot;&#39;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="n">stringByReplacingOccurrencesOfString</span><span class="p">(</span><span class="s">&quot;&amp;lt;&quot;</span><span class="p">,</span> <span class="nl">withString</span><span class="p">:</span> <span class="s">&quot;&lt;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="n">stringByReplacingOccurrencesOfString</span><span class="p">(</span><span class="s">&quot;&amp;gt;&quot;</span><span class="p">,</span> <span class="nl">withString</span><span class="p">:</span> <span class="s">&quot;&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="n">stringByReplacingOccurrencesOfString</span><span class="p">(</span><span class="s">&quot;&amp;amp;&quot;</span><span class="p">,</span> <span class="nl">withString</span><span class="p">:</span> <span class="s">&quot;&amp;&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">text</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<h4>repeat 一张小图片</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">patternImage</span> <span class="o">=</span> <span class="bp">UIImage</span><span class="p">(</span><span class="nl">named</span><span class="p">:</span> <span class="s">&quot;comment_bottomLine&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">bottomImageView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'><span class="n">bottomImageView</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="bp">UIColor</span><span class="p">(</span><span class="nl">patternImage</span><span class="p">:</span> <span class="n">patternImage</span><span class="o">!</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<h4>NSURL 解析</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="bp">NSURL</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">prt_URLItems</span><span class="p">:</span> <span class="p">[</span><span class="nl">String</span><span class="p">:</span> <span class="n">String</span><span class="p">]</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="n">components</span> <span class="o">=</span> <span class="bp">NSURLComponents</span><span class="p">(</span><span class="nl">URL</span><span class="p">:</span> <span class="nb">self</span><span class="p">,</span> <span class="nl">resolvingAgainstBaseURL</span><span class="p">:</span> <span class="nb">false</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">guard</span> <span class="k">let</span> <span class="n">items</span> <span class="o">=</span> <span class="n">components</span><span class="o">?</span><span class="p">.</span><span class="n">queryItems</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">var</span> <span class="n">infos</span> <span class="o">=</span> <span class="p">[</span><span class="nl">String</span><span class="p">:</span> <span class="n">String</span><span class="p">]()</span>
</span><span class='line'>        <span class="n">items</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">infos</span><span class="p">[</span><span class="err">$</span><span class="mf">0.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="err">$</span><span class="mf">0.</span><span class="n">value</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">infos</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">items</span> <span class="o">=</span> <span class="bp">NSURL</span><span class="p">(</span><span class="nl">string</span><span class="p">:</span> <span class="s">&quot;http://www.weibo.com/1783821582/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo&quot;</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="n">prt_URLItems</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Optional([&quot;mod&quot;: &quot;personinfo&quot;, &quot;rightmod&quot;: &quot;1&quot;, &quot;wvr&quot;: &quot;6&quot;])</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<h4>获取版本号和 Build 号</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="bp">NSBundle</span><span class="p">.</span><span class="n">mainBundle</span><span class="p">().</span><span class="n">infoDictionary</span><span class="o">?</span><span class="p">[</span><span class="s">&quot;CFBundleVersion&quot;</span><span class="p">]</span> <span class="kt">as</span><span class="o">?</span> <span class="n">String</span> <span class="c1">// Build</span>
</span><span class='line'><span class="bp">NSBundle</span><span class="p">.</span><span class="n">mainBundle</span><span class="p">().</span><span class="n">infoDictionary</span><span class="o">?</span><span class="p">[</span><span class="s">&quot;CFBundleShortVersionString&quot;</span><span class="p">]</span> <span class="kt">as</span><span class="o">?</span> <span class="n">String</span> <span class="c1">// 版本号</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<h4>判断一个 view 是否是另一个 view 的子视图</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isDescendantOfView:</span><span class="p">(</span><span class="bp">UIView</span> <span class="o">*</span><span class="p">)</span><span class="nv">view</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<h4>隐藏或显示&#8221;隐藏文件&#8221;</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">defaults</span> <span class="n">write</span> <span class="n">com</span><span class="p">.</span><span class="n">apple</span><span class="p">.</span><span class="n">finder</span> <span class="n">AppleShowAllFiles</span> <span class="o">-</span><span class="n">boolean</span> <span class="nb">true</span><span class="p">;</span> <span class="n">killall</span> <span class="n">Finder</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<h4>设置圆角（左上角，右上角）</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="bp">UIBezierPath</span><span class="p">(</span><span class="nl">roundedRect</span><span class="p">:</span> <span class="n">ScreenBounds</span><span class="p">,</span> <span class="nl">byRoundingCorners</span><span class="p">:</span> <span class="p">[.</span><span class="n">TopLeft</span><span class="p">,</span> <span class="p">.</span><span class="n">TopRight</span><span class="p">],</span> <span class="nl">cornerRadii</span><span class="p">:</span> <span class="bp">CGSize</span><span class="p">(</span><span class="nl">width</span><span class="p">:</span> <span class="n">cornerRadius</span><span class="p">,</span> <span class="nl">height</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<h4>阴影</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">whiteView</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">shadowColor</span> <span class="o">=</span> <span class="bp">UIColor</span><span class="p">.</span><span class="n">redColor</span><span class="p">().</span><span class="bp">CGColor</span>
</span><span class='line'><span class="n">whiteView</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">shadowOffset</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">whiteView</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">shadowOpacity</span> <span class="o">=</span> <span class="mf">1.0</span>
</span><span class='line'><span class="n">whiteView</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">shadowRadius</span> <span class="o">=</span> <span class="mf">20.0</span>
</span><span class='line'><span class="n">whiteView</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">shadowPath</span> <span class="o">=</span> <span class="bp">UIBezierPath</span><span class="p">(</span><span class="nl">rect</span><span class="p">:</span> <span class="n">whiteView</span><span class="p">.</span><span class="n">bounds</span><span class="p">).</span><span class="bp">CGPath</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<h4>BasicAnimation</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">pathAnimation</span> <span class="o">=</span> <span class="bp">CABasicAnimation</span><span class="p">(</span><span class="nl">keyPath</span><span class="p">:</span> <span class="s">&quot;path&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">pathAnimation</span><span class="p">.</span><span class="n">fromValue</span> <span class="o">=</span> <span class="n">startPath</span>
</span><span class='line'><span class="n">pathAnimation</span><span class="p">.</span><span class="n">toValue</span> <span class="o">=</span> <span class="n">endPath</span>
</span><span class='line'><span class="n">pathAnimation</span><span class="p">.</span><span class="n">duration</span> <span class="o">=</span> <span class="mf">0.3</span>
</span><span class='line'><span class="n">pathAnimation</span><span class="p">.</span><span class="n">timingFunction</span> <span class="o">=</span> <span class="bp">CAMediaTimingFunction</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">kCAMediaTimingFunctionEaseOut</span><span class="p">)</span> <span class="c1">// animation curve is Ease Out</span>
</span><span class='line'><span class="n">pathAnimation</span><span class="p">.</span><span class="n">fillMode</span> <span class="o">=</span> <span class="n">kCAFillModeBoth</span> <span class="c1">// keep to value after finishing</span>
</span><span class='line'><span class="n">pathAnimation</span><span class="p">.</span><span class="n">removedOnCompletion</span> <span class="o">=</span> <span class="nb">false</span> <span class="c1">// don&#39;t remove after finishing</span>
</span><span class='line'>
</span><span class='line'><span class="n">shapeLayer</span><span class="p">.</span><span class="n">addAnimation</span><span class="p">(</span><span class="n">pathAnimation</span><span class="p">,</span> <span class="nl">forKey</span><span class="p">:</span> <span class="n">pathAnimation</span><span class="p">.</span><span class="n">keyPath</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><a href="http://jamesonquave.com/blog/fun-with-cashapelayer/">Fun with CAShapeLayer</a></p></blockquote>

<p><br /></p>

<h4>禁止 <code>WKWebView</code> 长按复制</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">source</span> <span class="o">=</span> <span class="s">&quot;var style = document.createElement(&#39;style&#39;); style.type = &#39;text/css&#39;; style.innerText = &#39;*:not(input):not(textarea) { -webkit-user-select: none; -webkit-touch-callout: none; }&#39;; var head = document.getElementsByTagName(&#39;head&#39;)[0]; head.appendChild(style);&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nl">script</span><span class="p">:</span> <span class="n">WKUserScript</span> <span class="o">=</span> <span class="n">WKUserScript</span><span class="p">(</span><span class="nl">source</span><span class="p">:</span> <span class="n">source</span> <span class="kt">as</span> <span class="n">String</span><span class="p">,</span> <span class="nl">injectionTime</span><span class="p">:</span> <span class="p">.</span><span class="n">AtDocumentEnd</span><span class="p">,</span> <span class="nl">forMainFrameOnly</span><span class="p">:</span> <span class="nb">true</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create the user content controller and add the script to it</span>
</span><span class='line'><span class="k">let</span> <span class="nl">userContentController</span><span class="p">:</span> <span class="n">WKUserContentController</span> <span class="o">=</span> <span class="n">WKUserContentController</span><span class="p">()</span>
</span><span class='line'><span class="n">userContentController</span><span class="p">.</span><span class="n">addUserScript</span><span class="p">(</span><span class="n">script</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create the configuration with the user content controller</span>
</span><span class='line'><span class="k">let</span> <span class="nl">configuration</span><span class="p">:</span> <span class="n">WKWebViewConfiguration</span> <span class="o">=</span> <span class="n">WKWebViewConfiguration</span><span class="p">()</span>
</span><span class='line'><span class="n">configuration</span><span class="p">.</span><span class="n">userContentController</span> <span class="o">=</span> <span class="n">userContentController</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<h4>禁止 <code>WKWebView</code> 放大缩小</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// Javascript that disables pinch-to-zoom by inserting the HTML viewport meta tag into &lt;head&gt;</span>
</span><span class='line'><span class="k">let</span> <span class="nl">source</span><span class="p">:</span> <span class="bp">NSString</span> <span class="o">=</span> <span class="s">&quot;var meta = document.createElement(&#39;meta&#39;);&quot;</span> <span class="o">+</span>
</span><span class='line'>    <span class="s">&quot;meta.name = &#39;viewport&#39;;&quot;</span> <span class="o">+</span>
</span><span class='line'>    <span class="s">&quot;meta.content = &#39;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&#39;;&quot;</span> <span class="o">+</span>
</span><span class='line'>    <span class="s">&quot;var head = document.getElementsByTagName(&#39;head&#39;)[0];&quot;</span> <span class="o">+</span>
</span><span class='line'><span class="s">&quot;head.appendChild(meta);&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nl">script</span><span class="p">:</span> <span class="n">WKUserScript</span> <span class="o">=</span> <span class="n">WKUserScript</span><span class="p">(</span><span class="nl">source</span><span class="p">:</span> <span class="n">source</span> <span class="kt">as</span> <span class="n">String</span><span class="p">,</span> <span class="nl">injectionTime</span><span class="p">:</span> <span class="p">.</span><span class="n">AtDocumentEnd</span><span class="p">,</span> <span class="nl">forMainFrameOnly</span><span class="p">:</span> <span class="nb">true</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create the user content controller and add the script to it</span>
</span><span class='line'><span class="k">let</span> <span class="nl">userContentController</span><span class="p">:</span> <span class="n">WKUserContentController</span> <span class="o">=</span> <span class="n">WKUserContentController</span><span class="p">()</span>
</span><span class='line'><span class="n">userContentController</span><span class="p">.</span><span class="n">addUserScript</span><span class="p">(</span><span class="n">script</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create the configuration with the user content controller</span>
</span><span class='line'><span class="k">let</span> <span class="nl">configuration</span><span class="p">:</span> <span class="n">WKWebViewConfiguration</span> <span class="o">=</span> <span class="n">WKWebViewConfiguration</span><span class="p">()</span>
</span><span class='line'><span class="n">configuration</span><span class="p">.</span><span class="n">userContentController</span> <span class="o">=</span> <span class="n">userContentController</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<h4>根据触摸点判断是否 touch 点击了某个 view</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kr">override</span> <span class="k">func</span> <span class="nf">touchesBegan</span><span class="p">(</span><span class="nl">touches</span><span class="p">:</span> <span class="n">Set</span><span class="o">&lt;</span><span class="bp">NSObject</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">withEvent</span> <span class="nl">event</span><span class="p">:</span> <span class="bp">UIEvent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">super</span><span class="p">.</span><span class="n">touchesBegan</span><span class="p">(</span><span class="n">touches</span><span class="p">,</span> <span class="nl">withEvent</span><span class="p">:</span> <span class="n">event</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">location</span> <span class="o">=</span> <span class="p">(</span><span class="n">touches</span><span class="p">.</span><span class="n">first</span> <span class="kt">as</span><span class="o">?</span> <span class="bp">UITouch</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="n">locationInView</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">searchCircleY</span> <span class="o">=</span> <span class="n">bottomView</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">searchCircleImageView</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">frame</span> <span class="o">=</span> <span class="bp">CGRect</span><span class="p">(</span><span class="nl">origin</span><span class="p">:</span> <span class="bp">CGPoint</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span><span class="n">searchCircleImageView</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span><span class="n">searchCircleY</span><span class="p">)</span> <span class="p">,</span> <span class="nl">size</span><span class="p">:</span> <span class="n">searchCircleImageView</span><span class="p">.</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">CGRectContainsPoint</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">location</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 点击在searchCircleImageView</span>
</span><span class='line'>            <span class="n">dismissViewControllerAnimated</span><span class="p">(</span><span class="nb">true</span><span class="p">,</span> <span class="nl">completion</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<h4>隐藏键盘(点击屏幕任意位置)</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">touchesBegan:</span><span class="p">(</span><span class="bp">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">touches</span> <span class="nf">withEvent:</span><span class="p">(</span><span class="bp">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="nv">event</span><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">super</span> <span class="nl">touchesBegan</span><span class="p">:</span><span class="n">touches</span> <span class="nl">withEvent</span><span class="p">:</span><span class="n">event</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">endEditing</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<p>在包含 <code>UITableView</code> 视图中添加单击手势
如果在包含 <code>UITableView</code> 视图中添加单击手势，这个单击手势会屏蔽掉 <code>UITableView</code>的 <code>-didSelectRowAtIndexPath</code></p>

<p>在单击点位于UITableView内的时候取消响应</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">gestureRecognizerShouldBegin:</span><span class="p">(</span><span class="bp">UIGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">gestureRecognizer</span><span class="p">{</span>
</span><span class='line'>  <span class="bp">CGPoint</span> <span class="n">point</span> <span class="o">=</span> <span class="p">[</span><span class="n">gestureRecognizer</span> <span class="nl">locationInView</span><span class="p">:</span><span class="nb">self</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">CGRectContainsPoint</span><span class="p">(</span><span class="n">menuTableView</span><span class="p">.</span><span class="n">frame</span><span class="p">,</span> <span class="n">point</span><span class="p">)){</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>简单点的就将单击手势的 <code>cancelsTouchesInView</code> 设置为 NO 即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">singleTap</span><span class="p">.</span><span class="n">cancelsTouchesInView</span> <span class="o">=</span> <span class="nb">false</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>默认为YES，若NO，Gesture Recognizers和hit-test view同时响应触摸序列</p></blockquote>

<p><br /></p>

<h4>Octopress</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">rake</span> <span class="s">&quot;new_post[Post Title]&quot;</span> <span class="c1">// zsh下</span>
</span><span class='line'><span class="n">rake</span> <span class="n">generate</span>                                  <span class="err">生成</span><span class="n">html</span><span class="err">文件</span>
</span><span class='line'><span class="n">rake</span> <span class="n">preview</span>
</span><span class='line'><span class="n">rake</span> <span class="n">deploy</span>                                    <span class="err">部署文章（博客）</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">git</span> <span class="n">add</span> <span class="p">.</span>
</span><span class='line'><span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="err">&#39;</span><span class="n">initial</span> <span class="n">source</span> <span class="n">commit</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="n">source</span>
</span></code></pre></td></tr></table></div></figure>


<p>deploy 时 <code>non-fast-forward</code> 问题解决方案</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">cd</span> <span class="n">octopress</span><span class="o">/</span><span class="n">_deploy</span>
</span><span class='line'><span class="n">git</span> <span class="n">pull</span> <span class="n">origin</span> <span class="n">master</span>
</span><span class='line'><span class="n">cd</span> <span class="p">..</span>
</span><span class='line'><span class="n">rake</span> <span class="n">deploy</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub库]]></title>
    <link href="http://limon.top/githubku/"/>
    <updated>2015-12-23T02:31:25+08:00</updated>
    <id>http://limon.top/githubku</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/phimage/Erik">Erik</a> &mdash;  WebKit的分装，较好支持CSS和JS</p>

<p><a href="https://github.com/kishikawakatsumi/KeychainAccess">KeychainAccess</a></p>

<p><a href="https://github.com/danielgindi/ios-charts">ios-charts</a> &mdash;   表格</p>

<p><a href="http://www.jianshu.com/p/b45655e23a42">顶部标题滚动条</a></p>

<p><a href="https://github.com/xxycode/XXYAudioEngine">XXYAudioEngine</a> &mdash; 基于NSURLSession和AVAudioPlayer封装的一个播放在线音乐的工具，可以把音乐下载至本地，支持清除缓存</p>

<p><a href="https://github.com/daisuke0131/ViewMonitor">VirwMonitor 点击测量视图位置、大小、背景、字体大小等信息</a></p>

<p><a href="https://github.com/wojteklu/Watchdog">Watchdog</a> &mdash; iOS实时卡顿监控</p>

<p><a href="https://github.com/kasketis/netfox">netfox：iOS 网络调试工具</a> &mdash; 配置只需一行代码，可以调试包括第三方库在内的网络请求</p>

<p><a href="https://github.com/hyperoslo/ImagePicker">ImagePicker is an all-in-one camera solution for your iOS app</a></p>

<p><a href="https://github.com/FlexMonkey/Filterpedia">Filterpedia</a> &mdash; 基于 Core Image 框架，完整、强大的图片滤镜类库</p>

<p><a href="https://github.com/KyoheiG3/AttributedLabel">高性能 AttributedLabel</a></p>

<p><a href="https://github.com/hackiftekhar/IQKeyboardManager">KeyboardManager</a></p>

<p><a href="https://github.com/DeveloperLx/LxTabBadgePoint">tabBar上的角标Category写法，无需继承子类</a></p>

<p><a href="https://github.com/neonichu/LiveGIFs">Export your Live Photos as animated GIFs</a></p>

<p><a href="https://github.com/Roxasora/RxWebViewController">实现类似微信的 webView 导航效果，左滑返回上个网页</a></p>

<p><a href="https://github.com/onevcat/APNGKit">一个高性能的 APNG 库</a></p>

<p><a href="https://github.com/khaledmtaha/XAnimatedImage">XAnimatedImage</a> &mdash; 一个高性能的 GIF 动画引擎基于 FLAnimatedImage</p>

<p><a href="https://github.com/Aufree/Hodor?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io">Hodor</a> &mdash; 应用内直接更改应用语言而无需退出应用, 类似微信</p>

<p><a href="https://github.com/nixzhu/AudioBot">AudioBot</a> &mdash; 录音Demo，录音时，同时也可以录入正在播放的音乐</p>

<p><a href="https://github.com/audiokit/AudioKit">AudioKit</a> &mdash; 一个很棒的录音库，文档教程齐全，已有一个上架<a href="http://matthewfecher.com/app-developement/swift-synth/">App</a></p>

<p><a href="https://github.com/Shannon-s-Dreamland/DropdownMenu">多级下拉菜单</a></p>

<p><a href="https://github.com/VerbalExpressions/SwiftVerbalExpressions">正则库</a></p>

<p><a href="http://www.weibo.com/mygroups?gid=3771498714262571&amp;wvr=6&amp;leftnav=1">面向协议编程单元测试 Mock 框架</a></p>

<p><a href="https://github.com/GJGroup/GJRatioAutoLayout">RatioAutoLayout</a> &mdash; Autolayout下，只需一个开关，即可让当前view进行等比缩放</p>

<p><a href="https://github.com/lra/mackup">Macup</a> &mdash; dotfiles 管理，通过git，dropbox来进行备份，恢复自定义设置的文件</p>

<p><a href="https://github.com/yukiasai/Gecco">支持对视图进行局部高亮</a> &mdash; 快速创建产品的新手指导界面</p>

<p><a href="https://github.com/FolioReader/FolioReaderKit?utm_campaign=This%2BWeek%2Bin%2BSwift&amp;utm_medium=web&amp;utm_source=This_Week_in_Swift_71">阅读器</a></p>

<p><a href="https://github.com/pili-engineering/PLCameraStreamingKit">PLCameraStreamingKit, 快速构建一款类似 Meerkat 或 Periscope 的手机直播应用</a> &mdash; 👍👍👍</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Animation]]></title>
    <link href="http://limon.top/animation/"/>
    <updated>2015-12-23T02:28:25+08:00</updated>
    <id>http://limon.top/animation</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/keefo/CATweaker"> CAMediaTimingFunction helper tool </a></p>

<p><a href="https://github.com/cjwirth/awesome-ios-ui"> 动画集合 </a></p>

<p><a href="https://github.com/JakeLin/IBAnimatable/blob/master/Documentation/README.zh.md">IBAnimatable</a> &mdash; 是一个帮助我们在Interface Builder和Swift playground里面设计UI, 交互, 导航模式, 换场和动画的开源库</p>

<p><a href="https://github.com/antiguab/BAFluidView"> 波浪 </a></p>

<p><a href="https://github.com/poolqf/FillableLoaders"> 水波上涨填满 </a></p>

<p><a href="https://github.com/FancyPixel/BallSwift"> UIDynamics iOS 9 </a></p>

<p><a href="https://github.com/okmr-d/DOFavoriteButton"> 点赞 </a></p>

<p><a href="https://github.com/IFTTT/RazzleDazzle"> A simple keyframe-based animation framework </a></p>

<p><a href="https://github.com/ninjaprox/NVActivityIndicatorView"> 加载动画集合 </a></p>

<p><a href="http://www.cocoachina.com/ios/20151202/14532.html"> 一款Loading动画的实现思路 </a></p>

<p><a href="https://github.com/yoavlt/LiquidLoader"> 粘性加载动画 </a></p>

<p><a href="http://pandara.xyz/2015/10/29/jelly_refresh/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io">利用贝塞尔曲线实现Q弹的下拉刷新</a></p>

<p><a href="https://github.com/PandaraWen/WaterDropViewDemo">水滴效果</a></p>

<p><a href="https://github.com/overboming/ZCAnimatedLabel"> Label动画 </a></p>

<p><a href="https://github.com/gmertk/BusyNavigationBar"> NavigationBar 动画 </a></p>

<p><a href="https://github.com/ltebean/LTNavigationBar"> NavigationBar的背景颜色，高度 </a></p>

<p><a href="https://github.com/DanisFabric/RainbowNavigation/blob/master/README_CN.md"> 动态改变UINavigationBar背景色 </a></p>

<p><a href="https://github.com/MoZhouqi/KMNavigationBarTransition"> 顺滑过渡导航栏（不同背景颜色） </a> &mdash; 👍</p>

<p><a href="https://github.com/overboming/ZCAnimatedLabel"> UILabel 动画 </a></p>

<p><a href="https://github.com/entotsu/PullToBounce"> 下拉刷新 PullToBounce </a></p>

<p><a href="https://github.com/yoavlt/LiquidFloatingActionButton"> 菜单粘性按钮 </a></p>

<p><a href="https://github.com/liuzhiyi1992/SpreadButton">自适应边界的散开按钮</a></p>

<p><a href="https://github.com/noppefoxwolf/FlowBarButtonItem?utm_campaign=This%2BWeek%2Bin%2BSwift&amp;utm_medium=web&amp;utm_source=This_Week_in_Swift_71">浮动的 Button</a></p>

<p><a href="https://github.com/Yalantis/Context-Menu.iOS">折叠菜单</a></p>

<p><a href="https://github.com/Yalantis/Persei">折叠菜单 (Yalantis出品)</a></p>

<p><a href="http://www.cocoachina.com/ios/20160104/14858.html">图片实现多层折叠效果</a></p>

<p><a href="https://github.com/Ramotion/folding-cell">Cell 折叠动</a> &mdash; 👍👍👍</p>

<p><a href="https://github.com/MartinRGB/MTMaterialDelete"> 粉碎删除 </a></p>

<p><a href="https://github.com/SergioChan/SCTableViewCell"> 侧滑删除cell </a></p>

<p><a href="http://xxycode.com/ru-he-zhi-zuo-ge-xuan-ku-hao-wan-de-bao-zha-xiao-guo-2/"> 如何制作一个炫酷好玩的爆炸效果 </a></p>

<p><a href="https://github.com/Boris-Em/BEMCheckBox"> Check box </a></p>

<p><a href="https://github.com/gontovnik/DGElasticPullToRefresh"> 皮筋式弹性下拉即刷新 </a></p>

<p><a href="http://iostuts.io/2015/10/17/elastic-bounce-using-uibezierpath-and-pan-gesture/">皮筋式弹性下拉即刷新 文章 Elastic view animation using UIBezierPath </a></p>

<p><a href="https://github.com/lkzhao/ElasticTransition">皮筋式动画转场效果</a></p>

<p><a href="https://github.com/Yalantis/StarWars.iOS"> 瞬间崩塌为小方块动画效果 </a></p>

<p><a href="https://github.com/TBXark/TKRubberIndicator"> page control </a></p>

<p><a href="https://github.com/AliThink/HorizontalProgress"> HorizontalProgress 进程 </a></p>

<p><a href="https://github.com/SergioChan/SCTrelloNavigation"> trello 的导航动效控件 </a></p>

<p><a href="https://github.com/DroidsOnRoids/MPParallaxView"> Apple TV Parallax 效果的视图 </a></p>

<p><a href="https://github.com/CosmicMind/MaterialKit"> MaterialKit 是一个用 Swift 写的 Material Design 框架, 拥有多种漂亮的动画效果和样式 </a></p>

<p><a href="https://github.com/Guidebook/gbkui-button-progress-view"> Download Button Aniamtion </a></p>

<p><a href="https://github.com/Magic-Unique/DoubleThumbSlider">双滑块Slider控件</a></p>

<p><a href="https://github.com/Ramotion/reel-search">捷输入并选择组件</a> &mdash; 👍👍</p>

<p><a href="https://github.com/AfryMask/AFWaveView">心形波浪</a></p>

<p><a href="https://github.com/mukyasa/MMTextFieldEffects">各种输入框交互动画</a></p>

<p><a href="https://github.com/lovels/LBTagView">可拖拽的标签</a></p>

<p><a href="https://github.com/hyperoslo/Hue#user-content-gradients-1">Gradient 渐变 滑动</a></p>

<p><br />
<br /></p>

<h2>CollectionView</h2>

<p><a href="https://github.com/CezaryKopacz/CKWaveCollectionViewTransition"> CollectionView 转场动画 </a></p>

<p><a href="https://github.com/nathanwhy/HYAwesomeTransition"> 格瓦拉 cell移动动画Demo </a></p>

<p><a href="https://github.com/nshintio/uicollectionview-reordering"> UICollectionViews 拖动 </a></p>

<p><a href="https://github.com/alienjun/MyTags"> CollectionView实现的个人标签 </a></p>

<p><a href="https://github.com/CezaryKopacz/CKWaveCollectionViewTransition"> Wave CollectionView Transition </a></p>

<p><a href="http://t.cn/Rybxgpy?u=1783821582&amp;amp;amp;amp;amp;amp;amp;m=3885611247173418&amp;amp;amp;amp;amp;amp;amp;cu=1783821582"> iOS 书本打开动画制作教程 </a></p>

<p><a href="https://github.com/zhxnlai/ZLSwipeableViewSwift"> 卡片 </a></p>

<p><a href="https://github.com/seedante/CardAnimation"> 卡片式垂直翻转动画 </a></p>

<p><a href="https://github.com/seedante/SDECollectionViewAlbumTransition"> 相册翻开动画效果 </a></p>

<p><a href="https://github.com/demonnico/PinterestSwift"> 瀑布流 </a></p>

<p><a href="http://allsome.love/yin-xiang-bi-ji-jiao-hu-xiao-guo-de-shi-xian/?u=1783821582&amp;amp;m=3905429706568663&amp;amp;cu=1783821582&amp;amp;ru=2029464644&amp;amp;rm=3905408588445881"> 印象笔记交互效果 </a></p>

<p><a href="https://github.com/SmallLang/UICollectionViewLayoutDemo">自定义UICollectionViewFlowLayout和UICollectionViewLayout的两个例子</a></p>

<p><a href="https://medium.com/@victor_wang/build-your-cells-in-a-way-of-lego-fbf6a1133bb1#.eh7fkk93s">响应式CollectionView</a></p>

<p><br />
<br /></p>

<h2>Animations By Emails</h2>

<p><a href="http://www.ios-animations-by-emails.com/posts/2015-may#tutorial">Transitions with CoreImage</a></p>

<p><a href="http://ios-animations-by-emails.com/posts/2015-july">Fun with Gradients and Masks</a></p>

<p><a href="http://ios-animations-by-emails.com/posts/2015-november">fireworks</a></p>

<p><a href="http://www.jianshu.com/p/76c588893b19?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note&amp;utm_source=weibo">使用CAReplicatorLayer创建动画</a></p>

<p><br />
<br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[内存管理 - ARC]]></title>
    <link href="http://limon.top/nei-cun-guan-li-arc/"/>
    <updated>2015-01-22T18:20:16+08:00</updated>
    <id>http://limon.top/nei-cun-guan-li-arc</id>
    <content type="html"><![CDATA[<h2>什么是ARC</h2>

<p>Automatic Reference Counting，自动引用计数，即ARC。</p>

<p>在ARC下，不需用retain,release,autorelease,dealloc来管理内存，它提供了自动评估内存生存期的功能，并且在编译期间自动加入合适的管理内存的方法。编译器也会自动生成dealloc函数。</p>

<h3>ARC工作原理</h3>

<p>ARC并不是一项运行时的服务，实际上它是由Clang front-end提供的两段过程。下图演示了这两段过程。在front-end段时，Clang检查每个预处理文件的对象和属性。然后它跟据一些固定的规则将retain，release和autorelease语句加入其中。</p>

<blockquote><p>实际上，ARC在调用retain,release,autorelease,dealloc方法时，并不通过Objective-C消息派送机制，而是直接调用C。比如，ARC会调用与retain等价的objc_retain</p></blockquote>

<p><img src="http://limons-gitimage.stor.sinaapp.com/CFigure4.gif" alt="" /></p>

<p>举例来说：</p>

<ul>
<li>如果对象被分配内存并处于一个方法当中，它会在这个方法的结尾处获得一个release语句</li>
<li>如果是一个类属性，它的release语句会加入到类的dealloc方法中</li>
<li>如果这个对象是用来返回的或者它是一个容器对象，它会加入一个autorelease语句</li>
<li>如果这个对象是弱引用，把它放在一边不管它。</li>
</ul>


<blockquote><p>译于：<a href="http://www.drdobbs.com/mobile/automatic-reference-counting-on-ios/240000820">Automatic Reference Counting on iOS</a></p></blockquote>

<h3>代码演示</h3>

<h4>MRC下</h4>

<figure class='code'><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class=''><span class='line'>@class Bar;
</span><span class='line'>@interface Foo
</span><span class='line'>{
</span><span class='line'>@private
</span><span class='line'>    NSString *myStr;
</span><span class='line'>}
</span><span class='line'>@property (readonly) NSString *myStr;
</span><span class='line'>  
</span><span class='line'>- (Bar *)foo2Bar:(NSString *)aStr;
</span><span class='line'>- (Bar *)makeBar;
</span><span class='line'>//...
</span><span class='line'>@end
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>@implementation Foo;
</span><span class='line'>@dynamic myStr;
</span><span class='line'>  
</span><span class='line'>– (Bar *)foo2Bar:(NSString *)aStr
</span><span class='line'>{
</span><span class='line'>    Bar *tBar;
</span><span class='line'>      
</span><span class='line'>    if (![self.myStr isEqualToString:aStr])
</span><span class='line'>    {
</span><span class='line'>        [aStr retain];
</span><span class='line'>        [myStr release];
</span><span class='line'>        myStr = aStr;
</span><span class='line'>    }  
</span><span class='line'>    return ([self makeBar]);
</span><span class='line'>}
</span><span class='line'>  
</span><span class='line'>- (Bar *)makeBar
</span><span class='line'>{
</span><span class='line'>    Bar *tBar
</span><span class='line'>    //...
</span><span class='line'>    //... conversion code goes here
</span><span class='line'>    //...
</span><span class='line'>    [tBar autorelease];
</span><span class='line'>    return (tBar);
</span><span class='line'>}
</span><span class='line'>//...
</span><span class='line'>  
</span><span class='line'>- (void)dealloc
</span><span class='line'>{
</span><span class='line'>    [myStr release];
</span><span class='line'>    [super dealloc];
</span><span class='line'>}
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<h4>ARC下</h4>

<figure class='code'><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class=''><span class='line'>@class Bar;
</span><span class='line'>@interface Foo
</span><span class='line'>{
</span><span class='line'>@private
</span><span class='line'>    NSString *myStr;
</span><span class='line'>}
</span><span class='line'>@property(readonly) NSString *myStr;
</span><span class='line'>  
</span><span class='line'>- (Bar *)foo2Bar:(NSString *)aStr;
</span><span class='line'>- (Bar *)makeBar;
</span><span class='line'>//...
</span><span class='line'>@end
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>@implementation Foo;
</span><span class='line'>@dynamic myStr;
</span><span class='line'>  
</span><span class='line'>– (Bar *)foo2Bar:(NSString *)aStr
</span><span class='line'>{
</span><span class='line'>    Bar *tBar;
</span><span class='line'>      
</span><span class='line'>    if (![self.myStr isEqualToString:aStr])
</span><span class='line'>    {
</span><span class='line'>        myStr = aStr;
</span><span class='line'>    }  
</span><span class='line'>    return ([self makeBar]);
</span><span class='line'>}
</span><span class='line'>  
</span><span class='line'>- (Bar *)makeBar
</span><span class='line'>{
</span><span class='line'>    Bar *tBar
</span><span class='line'>    //...
</span><span class='line'>    //... conversion code goes here
</span><span class='line'>    //...
</span><span class='line'>    return (tBar);
</span><span class='line'>}
</span><span class='line'>//...
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<blockquote><p>以上代码来源于：<a href="http://www.drdobbs.com/mobile/automatic-reference-counting-on-ios/240000820">Automatic Reference Counting on iOS</a></p></blockquote>

<h2>ARC下内存管理 &mdash; 内存管理语义</h2>

<p>ARC帮助我们解决90%内存管理为题，剩余的10%包括：</p>

<ul>
<li>属性(property)的内存管理语义是用strong、还是weak？</li>
<li>循环引用（retain cycle）问题</li>
<li>CoreFoundation对象不归ARC管理</li>
</ul>


<h3>属性</h3>

<p>属性(property)是Objective-C的一项特性，用于封装对象中的数据。Objective-C对象通常会把其所需要的数据保存为各种实例变量。实例变量一般通过getter、setter来访问。</p>

<p><code>@property(nonatomic, strong) NSArray *emailList;</code></p>

<p>此<code>@property</code>会自动生成三个东西：_emailList实例变量、getter、setter</p>

<p>属性用于封装数据，而数据则要有“具体的所有权语义”(concrete ownership semantic)，也称为内存管理语义。</p>

<p>回归本题，在ARC下，我们通常用<strong>内存管理语义</strong>来管理内存，下面这一组语义仅会影响setter。例如，用setter设定一个新值时，它是应该“保留”(retain)此值呢，还是只将其赋给底层实例变量就好？这些取决于你是用strong，还是copy，还是assign等</p>

<ul>
<li><p><code>assign</code>  对“纯量类型”(scalar type)的简单赋值</p>

<pre><code>  -(void)setState:(int)State{  
      _state = state;  
  }
</code></pre></li>
<li><p><code>unsafe_unretained</code>  此语义与<code>assign</code>相同，但是它适用于&#8221;对象类型&#8221;，该语义表达一种&#8221;非拥有关系&#8221;(unretained),当对象被销毁时，属性值不会自动清空(&ldquo;不安全&rdquo;,unsafe)，这一点与<code>weak</code>有区别</p></li>
<li><p><code>weak</code>  该语义表达一种&#8221;非拥有关系&#8221;，为这种属性设置新值时，设置方法既不保留新值，也不释放旧值，即仅作简单赋值，类似<code>assign</code>，当对象销毁，属性值被赋值为<code>nil</code></p></li>
<li><p><code>strong</code>  该语义表达一种&#8221;拥有关系&#8221;，为这种属性值设置新值时，设置方法会先保留新值，再释放旧值，最后把新值设置上去</p>

<pre><code>  -(void)setName:(NSArray *)emailList{    
      if ( emailList != _emailList){
          [emailList retain]; // 保留新值
          [_emailList release]; // 释放旧值
          _emailList = emailList;
      }   
  }
</code></pre></li>
</ul>


<p>此setter将保留新值并释放旧值，然后更新实例变量，令其指向新值。顺序很重要，假如两个值都指向对象A，还未保留新值就先把旧值释放了，那么先执行的release操作就可能导致对象A被回收，而后续的retain操作并无法令对象A复生，于是实例变量就成了悬挂指针</p>

<blockquote><p>当所指向的对象被释放或者收回，此情况下该指针便称悬垂指针（也叫迷途指针）。</p></blockquote>

<ul>
<li><p>copy  此语义与strong类似，不同在于setter并不保留新值，而是将其<code>copy</code>，如下：</p>

<pre><code>  @property (nonatomic, copy) NSString *name;

  -(void)setName:(NSString*)name{  
      if ( name != _name){  
          [_name release];
          _name = nil;
          _name = [name copy]; 
      }  
  }
</code></pre></li>
</ul>


<p>使用copy可以用来保护数据的封装性，比方说，传递过来的新值是一个NSMutableString的实例，此时若不<code>copy</code>，当设置完属性值之后，该可变新值在对象不知情的情况下遭人更改。所以，这时就要<code>copy</code>一份“不可变”(immutable)的字符串，确保对象中的字符串值不会不会无意间变动。</p>

<h3>ARC下内存管理 &mdash; 基本规则</h3>

<p>ARC下内存管理的一个基本规则：只要某个对象被任一strong指针指向，那么它将不会被回收。</p>

<h4>strong</h4>

<p>在MRC下，如果想令一个对象继续存活，需用retain来递增计数器，不过ARC已经在编译时帮我们加入了retain、release等，现在唯一需要的是，用一个强指针指向该对象，只要指针没有被空置，该对象会一直在堆上。</p>

<blockquote><p>实际上，不论MRC和ARC下，还是在用引用计数来管理内存，具体请看：<a href="http://limon-.github.io/blog/2015/01/13/nei-cun-guan-li-yin-yong-ji-shu-qi/">内存管理 - 引用计数器</a></p></blockquote>

<p>在默认情况下，所有的实例变量和局部变量都是strong类型的。可以说strong类型的指针在行为上和MRC时代的retain是比较相似的。</p>

<h4>weak</h4>

<p>weak常用在两个对象间存在包含关系时：对象A有一个strong指针指向对象B，并持有它，而对象B中也有一个weak指针指回对象B，从而避免了循环持有。</p>

<p>一个常见的例子就是delegate设计模式，viewController中有一个strong指针指向它所负责管理的UITableView，而UITableView中的dataSource和delegate指针都是指向viewController的weak指针。可以说，weak指针的行为和MRC时代的assign有一些相似点，但是考虑到weak指针更聪明些（会自动指向nil）</p>

<p><img src="http://limons-gitimage.stor.sinaapp.com/arcpic7.png" alt="" /></p>

<blockquote><p>代理模式可以简单认为，两个对象之间形成&#8221;半保留环&#8221;（A对象强指针指向B对象，B对象弱指针指向A对象）</p></blockquote>

<h3>ARC下内存管理 &mdash; 循环引用</h3>

<p>接下来简单讲讲容易循环引用的场景，详情请看<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html#//apple_ref/doc/uid/TP40011210-CH5-SW3">官方文档</a>的相关资料</p>

<h4>委托模式</h4>

<pre><code>@property (nonatomic,weak) id&lt;ComposeToolbarButtonTypeDelegate&gt; delegate; 
</code></pre>

<p>用<code>weak</code>形成“半保留环”，防止循环引用</p>

<h4>block</h4>

<p>这个网上大把，可以看看<a href="http://www.cnbluebox.com/?p=255">block使用小结、在arc中使用block、如何防止循环引用</a></p>

<h3>ARC下内存管理 &mdash; self</h3>

<p>ARC下，方法内的self既不是strong也不是weak，而是unsafe_unretained的（init系列方法的self除外）。
换而言之，在普通方法中，ARC不会对<code>self</code>做<code>retain</code>和<code>release</code>操作，生命周期全由调用方来决定，如果调用方没有保证<code>self</code>在被调用方法中的生命周期，可能在此方法中运行到一半，<code>self</code>就被释放了，可能程序就崩溃了。</p>

<h2>总结</h2>

<ul>
<li>ARC管理对象生命期的基本办法：在编译期间，在合适的地方插入<code>retain</code>和<code>release</code>操作</li>
<li>在ARC下，我们通常通过<code>内存管理语义</code>来管理内存，常见的有：<code>strong</code>、<code>weak</code>、<code>copy</code></li>
</ul>


<h2>番外</h2>

<p>研读了@sunny大大的<a href="http://blog.sunnyxx.com/2015/01/17/self-in-arc/">《ARC对self的内存管理》</a>之后作一些笔记，</p>

<h2>参考资料</h2>

<p><a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html">Objective-C Automatic Reference Counting (ARC)</a> &mdash;&ndash; 关于ARC的详细文档</p>

<p><a href="http://blog.sunnyxx.com/2015/01/17/self-in-arc/">ARC对self的内存管理</a> &mdash;&ndash; 专门对ARC下self的剖析</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[内存管理 - Autorelease]]></title>
    <link href="http://limon.top/autoreleasepool/"/>
    <updated>2015-01-19T16:12:34+08:00</updated>
    <id>http://limon.top/autoreleasepool</id>
    <content type="html"><![CDATA[<p>Autorelease实际上只是把对release的调用延迟了，对于每一个Autorelease，系统只是把该Object放入了当前的Autorelease pool中，当该pool被释放时，该pool中的所有Object会被调用release，也就是计数器会减1，但是自动释放池被销毁了，里面的对象并不一定会被销毁。</p>

<p>简而言之，autorelease pool 避免了频繁申请/释放内存。</p>

<h2>pool什么时候被销毁？</h2>

<p>在每一个Runloop结束时，当前栈顶的Autorelease pool会被销毁，此pool内的OC对象会被release。
那什么是一个Runloop呢？ 一个UI事件，Timer call， delegate call， 都会是一个新的Runloop</p>

<p>在Iphone项目中，大家会看到一个默认的Autorelease pool，程序开始时创建，程序退出时销毁，按照对Autorelease的理解，岂不是所有autorelease pool里的对象在程序退出时才release， 这样跟内存泄露有什么区别？</p>

<p>答案是，对于每一个Runloop， 系统会隐式创建一个Autorelease pool，这样所有的release pool会构成一个栈式结构，遵循先进后出，在每一个Runloop结束时，当前栈顶的Autorelease pool会被销毁，这样这个pool里的每个OC对象会被release。</p>

<h2>pool嵌套，栈式结构</h2>

<p>对于每一个Runloop， 系统会隐式创建一个Autorelease pool，这样所有的release pool会构成一个栈式结构，遵循先进后出</p>

<figure class='code'><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;Foundation/Foundation.h&gt; 
</span><span class='line'>#import "Person.h" 
</span><span class='line'>int main(int argc, const char * argv[]) 
</span><span class='line'>{ 
</span><span class='line'>     
</span><span class='line'>    // 自动释放池1 
</span><span class='line'>    @autoreleasepool { 
</span><span class='line'>         
</span><span class='line'> // 对象的释放交给 自动释放池去管理 不用再写[person release] 
</span><span class='line'>        Person *person = [[Person alloc] init];  
</span><span class='line'>         
</span><span class='line'>        // 再创建一个自动释放池2 
</span><span class='line'>        @autoreleasepool { 
</span><span class='line'>             
</span><span class='line'>            Person *person2 = [[Person alloc] init]; 
</span><span class='line'>        } 
</span><span class='line'>        
</span><span class='line'>        Person *person3 = [[Person alloc] init];    
</span><span class='line'>    } 
</span><span class='line'>    return 0; 
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>pool2先被销毁，最后才是pool1，即释放顺序：person2 -> person3/person2</p>

<h3>#</h3>

<h4>一下内容整理于 #<a href="http://blog.sunnyxx.com/2014/10/15/behind-autorelease/">黑幕背后的Autorelease</a></h4>

<p>在ARC下，<code>@autoreleasepool{}</code>创建一个AutoreleasePool，随后编译器将其改写成下面的样子：</p>

<pre><code>void *context = objc_autoreleasePoolPush();
// {}中的代码
objc_autoreleasePoolPop(context);
</code></pre>

<p>而这两个函数都是对AutoreleasePoolPage的简单封装，所以自动释放机制的核心就在于这个类。</p>

<pre><code>class AutoreleasePoolPage 
{
    .....
    magic_t const magic;
    id *next;
    pthread_t const thread;
    AutoreleasePoolPage * const parent;
    AutoreleasePoolPage *child;
    uint32_t const depth;
    uint32_t hiwat;
    ....
}
</code></pre>

<ul>
<li>AutoreleasePool并没有单独的结构，而是由若干个AutoreleasePoolPage以双向链表的形式组合而成（分别对应结构中的parent指针和child指针）</li>
<li>AutoreleasePool是按线程一一对应的（结构中的thread指针指向当前线程）</li>
<li>AutoreleasePoolPage每个对象会开辟4096字节内存（也就是虚拟内存一页的大小），除了上面的实例变量所占空间，剩下的空间全部用来储存autorelease对象的地址</li>
<li>上面的id *next指针作为游标指向栈顶最新add进来的autorelease对象的下一个位置</li>
<li>一个AutoreleasePoolPage的空间被占满时，会新建一个AutoreleasePoolPage对象，连接链表，后来的autorelease对象在新的page加入</li>
</ul>


<h2>总结</h2>

<ul>
<li>autorelease方法不会改变对象的引用计数器，只是将这个对象放到自动释放池中；</li>
<li>自动释放池实质是当自动释放池销毁后调用对象的release方法，不一定就能销毁对象（例如如果一个对象的引用计数器>1则此时就无法销毁）；</li>
<li>由于自动释放池最后统一销毁对象，因此如果一个操作比较占用内存（对象比较多或者对象占用资源比较多），最好不要放到自动释放池或者考虑放到多个自动释放池；</li>
<li>ObjC中类库中的静态方法一般都不需要手动释放，内部已经调用了autorelease方法；</li>
</ul>


<p><a href="http://blog.sunnyxx.com/2014/10/15/behind-autorelease/">黑幕背后的Autorelease</a></p>

<p><a href="http://www.cnblogs.com/kenshincui/p/3870325.html#autoreleasepool">Objective-C之内存管理</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[内存管理 - 引用计数]]></title>
    <link href="http://limon.top/nei-cun-guan-li-yin-yong-ji-shu-qi/"/>
    <updated>2015-01-13T14:27:14+08:00</updated>
    <id>http://limon.top/nei-cun-guan-li-yin-yong-ji-shu-qi</id>
    <content type="html"><![CDATA[<h2>内存管理概述</h2>

<p>在Objective-C中，系统并不会自动释放堆中的内存，其他高级语言C#、JAVA都有垃圾回收机制，但在Objective-C中并没有垃圾回收机制，那么Objective-C中的内存是如何管理？
Objective-C语言使用引用计数器来管理内存，每个对象都有个可以递增或递减的计数器。如果想使某个对象继续存活，那就递增其引用计数器；用完之后，就递减其计数器；当计数器为0，就表示没人关注此对象，此对象就会被销毁。</p>

<h2>引用计数工作原理</h2>

<p>在引用计数架构下，对象有个计数器，用以表示当前有多少个事物想令此对象继续存活。
NSObject协议声明了三个方法用于操作计数器</p>

<ul>
<li>Retain 递增计数器</li>
<li>Release 递减计数器</li>
<li>autorelease 待销毁autorelease pool时，再递减pool内的全部计数器</li>
</ul>


<p>1.对一个对象发送alloc、retain、new、copy消息，计数器 +1</p>

<p>2.对一个对象发送release消息，计数器 -1</p>

<p>3.当一个对象的引用计数器为0，对象就被回收(dealloced)，也就是说，系统会将对象其占用的内存标记为“可重用”(reuse)，放到“可用内存池”(avaiable pool)</p>

<h3>手动管理内存的三点原则</h3>

<ul>
<li>如果需要持有一个对象，那么对其发送retain</li>
<li>如果之后不再使用该对象，那么需要对其发送release（或者autorealse）</li>
<li>每一次对retain,alloc或者new的调用，需要对应一次release或autorealse调用</li>
</ul>


<h3>图表演示</h3>

<p>下图演示了一个对象自创建出来之后经历一次retain及两次release操作的过程</p>

<p><img src="http://limons-gitimage.stor.sinaapp.com/Memory.png" alt="Memory" /></p>

<p>下图所示的对象图中，ObjectB和ObjectC都引用了ObjectA，若B和C都不再使用A，则其计数器为0，便被回收。还有OrderObject想令B和C继续存活，而应用程序里又有另外的对象想令OrderObject继续存活，如果按“引用树“回溯，那么会发现一个“根对象”，在iOS中，则是UIApplication对象。此”根对象”是应用程序启动时创建的单例。</p>

<p><img src="http://limons-gitimage.stor.sinaapp.com/Memory-2.png" alt="Memory" /></p>

<h3>代码演示</h3>

<pre><code>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    NSMutableArray *array = [[NSMutableArray alloc] init];
    NSNumber *number = [[NSNumber alloc] initWithInt:1337]; 

    [array addObject:number]; //number的引用计数器+1（此时number的引用计数器至少为2）
    [number release]; // -1

    // do something with `array’

    [array release];
    return YES;
}
</code></pre>

<blockquote><p>在调用数组的<code>-addObject</code>方法时，数组也会在number上调用retain，以期令此对象存活</p></blockquote>

<h2>引用计数的应用场景</h2>

<p>在上面的代码演示中，还不看出引用计数的真正用处。在函数内使用一个临时的对象，通常不需要修改引用计数，只需在返回前将该对象销毁即可。
引用计数真正的应用场景是，用于对象之间传递和共享数据。</p>

<h2>引用计数的注意要点</h2>

<h3>retainCount可能永远不为0</h3>

<p>可能有人会测试对象释放时，看retainCount是否为0，代码如下：</p>

<pre><code>NSObject *object = [[NSObject alloc] init];
NSLog(@"%lu",(unsigned long)[object retainCount]);
[object release];
NSLog(@"%lu",(unsigned long)[object retainCount]);
</code></pre>

<p>但是，打印的结果是 1  1</p>

<p>最后一次输出，引用计数并没有变成0，原因是在最后一次 release 时，系统马上就回收了内存，就没有再将retainCount减1，因为不将值从1变成0，可以减少一次内存操作，加快对象的回收，只有在系统不打算这么优化时，计数值才会递减为0</p>

<h3>悬挂指针</h3>

<p>当所指向的对象被释放或者收回，此情况下该指针便称悬垂指针（也叫迷途指针）。</p>

<blockquote><p>某些编程语言允许未初始化的指针的存在，而这类指针即为野指针。</p></blockquote>

<p>为什么对象被回收了，向其发送消息不会崩？代码如下：</p>

<pre><code>NSNumber *number = [[NSNumber alloc] initWithInt:1337];

[number release];

NSLog(@"number = %@",number);
</code></pre>

<p>内存已经被回收，如果向其发送消息，可能使程序崩溃。为什么说“可能”，而没说“一定”，是因为对象的所占的内存在“解除分配”(deallocated)之后，只是放回了“可用内存池”(avaiable pool)。如果在执行NSLog时尚未覆写对象内存，那么该对象仍然有效。</p>

<blockquote><p>由此可见，因过早释放对象而导致的bug很难调试</p></blockquote>

<p>为了防止此情况的发送，一般release之后都会清空指针</p>

<pre><code>NSNumber *number = [[NSNumber alloc] initWithInt:1337];

[number release];
number = nil; 
</code></pre>

<blockquote><p>在Objective-C中，向nil发送消息不会出错。</p></blockquote>

<h2>总结</h2>

<ul>
<li>Objective-C通过<code>引用计数机制</code>来管理内存</li>
<li>对象创建之后，其引用计数器至少为1，<code>retain</code>和<code>release</code>分别会递增及递减计数器</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[爬支付宝的各种坑]]></title>
    <link href="http://limon.top/pa-zhi-fu-bao-de-ge-chong-keng/"/>
    <updated>2015-01-07T13:57:57+08:00</updated>
    <id>http://limon.top/pa-zhi-fu-bao-de-ge-chong-keng</id>
    <content type="html"><![CDATA[<p>爬了几天坑，在笔者崩溃之际终于集成好了，在这里分享一下经验。</p>

<p>笔者用的是<code>支付宝移动支付SDK标准版(iOS 2.1.2)</code>，申请的手机快捷支付</p>

<h2>密钥</h2>

<p>利用支付宝给的<code>openssl.exe</code>工具生成一共三种密钥，私钥、公钥，PKCS8类型的私钥</p>

<ul>
<li>公钥：放在支付宝上，去掉首尾的<code>-----BEGIN PUBLIC KEY-----``-----END PUBLIC KEY-----</code></li>
<li>PKCS8类型的私钥：如果选择在手机端签名，此私钥放在<code>NSString *privateKey = @"PKCS8类型的私钥"</code></li>
<li>私钥：此私钥带有<code>-----BEGIN RSA PRIVATE KEY-----</code> <code>-----END RSA PRIVATE KEY-----</code>，是专门给PHP用的，即在服务器端(PHP)签名，需要用到此私钥

<blockquote><p>Note：推荐服务器端签名，不过需要注意的是，PHP端用的是带<code>-----BEGIN RSA PRIVATE KEY-----</code> <code>-----END RSA PRIVATE KEY-----</code>的私钥。</p></blockquote></li>
</ul>


<h2>集成支付宝</h2>

<p>按照文档给的流程理论上想运行Demo是挺容易的，需要注意：</p>

<ul>
<li>Demo是在本地签的名，所以Demo上填写<code>NSString *privateKey = @"PKCS8类型的私钥"</code></li>
</ul>


<p>如果认为看似Demo超简单，你就错了。</p>

<h3>坑一：Undefined symbols for architecture x86_64:</h3>

<p>笔者爬过的坑，<code>ssl库</code>不支持x86_64就是64位模拟器。（若在服务器端签名不需引入ssl库）</p>

<blockquote><p>程序界公认女神@念茜给出的答案。。。</p></blockquote>

<p>也就是以下这种错误</p>

<p><img src="http://limons-gitimage.stor.sinaapp.com/alipay.png" alt="alipay error" /></p>

<p>针对这个错误，笔者尝试了各种方法，Architectures的各种设置，甚至都是一行一行对着Demo来改的，还有C++ Flage等等，最终还是不行。</p>

<p>和客服聊了一个多小时，最后客服把支付宝最老的版本和13年的版本给笔者。。。。挺好人的。。。。</p>

<h3>坑二：rsaSign()和rsaVerify()</h3>

<p>作为一个技术渣，iOS我是搞不掂了，还是搞PHP吧。。。</p>

<p>吐血的是，笔者用支付宝给的PHP版Demo，用它里面的方法<code>rsaSign()</code>签名，然后再用<code>rsaVerify()</code>验签，结果<code>rsaVerify()</code>返回的结果永远都是false，后来笔者终于准备出坑了，醒悟这个<code>rsaVerify()</code>应该不是验证这签名的。</p>

<p>后来百度了解了点皮毛：</p>

<p>RSA非对称密钥</p>

<p>① 假设A、B机器进行通信，已A机器为主；</p>

<p>② A首先需要用自己的私钥为发送请求数据签名，并将公钥一同发送给B；</p>

<p>③ B收到数据后，需要用A发送的公钥进行验证，已确保收到的数据是未经篡改的；</p>

<p>④ B验签通过后，处理逻辑，并把处理结果返回，返回数据需要用A发送的公钥进行加密（公钥加密后，只能用配对的私钥解密）；</p>

<p>⑤ A收到B返回的数据，使用私钥解密，至此，一次数据交互完成。</p>

<blockquote><p><code>rsaVerify</code>笔者猜测是验证支付宝的回调的。换句话说，签名直接就用<code>rsaSign()</code>就好了，就以下这几行代码</p></blockquote>

<figure class='code'><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>include('alipay_rsa.function.php');
</span><span class='line'>
</span><span class='line'>$data = $_POST['data'];
</span><span class='line'>$sign = rsaSign($data,'../key/rsa_private_key.pem');
</span><span class='line'>
</span><span class='line'>$arr = array(
</span><span class='line'>  'sign' =&gt; $sign
</span><span class='line'>);
</span><span class='line'>
</span><span class='line'>echo json_encode($arr);
</span><span class='line'>?&gt;</span></code></pre></td></tr></table></div></figure>


<p>以为这样就爬完了？</p>

<h3>坑三：urlEncoded</h3>

<p>想着服务器直接返回<code>sign</code>直接再拼接一下就提交给支付宝，结果又掉坑里。</p>

<pre><code>NSString *signedString = json[@"sign"];
NSLog(@"signedString-----%@",signedString);

NSString *orderString = [NSString stringWithFormat:@"%@&amp;sign=\"%@\"&amp;sign_type=\"%@\"",
                             orderSpec, signedString, @"RSA"];

[[AlipaySDK defaultService] payOrder:orderString fromScheme:appScheme callback:^(NSDictionary *resultDic).....
</code></pre>

<p>又跑去和客服聊天，笔者问客服：服务器返回的<code>sign</code>应该还需要<code>urlEncoded</code>对吧，客服回我说：不用啊，服务器已经弄了啊。</p>

<pre><code>/**
* RSA签名
* @param $data 待签名数据
* @param $private_key_path 商户私钥文件路径
* return 签名结果
*/
function rsaSign($data, $private_key_path) {
    $priKey = file_get_contents($private_key_path);
    $res = openssl_pkey_get_private($priKey);
    openssl_sign($data, $sign, $res);
    openssl_free_key($res);
    //base64编码
    $sign = base64_encode($sign);
    return $sign;
}
</code></pre>

<p>客服说<code>base64_encode($sign)</code>完就可以了不需要<code>urlEncoded</code>。笔者果断还是不相信客服。</p>

<pre><code>NSString *signedString = json[@"sign"];
NSLog(@"signedString-----%@",signedString);

// 深坑啊......    
signedString = [self urlEncodedString:signedString];

NSString *orderString = [NSString stringWithFormat:@"%@&amp;sign=\"%@\"&amp;sign_type=\"%@\"",
                             orderSpec, signedString, @"RSA"];

[[AlipaySDK defaultService] payOrder:orderString fromScheme:appScheme callback:^(NSDictionary *resultDic)....
</code></pre>

<p>需要在<code>RSADataSigner.m</code>中抽离<code>-urlEncodedString</code>方法出来。。。坑啊，明明都不需要手机端签名了，当然不会去看手机端签名的具体流程啦。又没看到哪里说明服务器端返回的<code>sign</code>需要<code>urlEncoded</code>，连客服都不知道需要<code>urlEncoded</code>&hellip;..</p>

<h3>心塞，不说了&hellip;&hellip;.</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading record]]></title>
    <link href="http://limon.top/reading-record/"/>
    <updated>2015-01-02T10:16:07+08:00</updated>
    <id>http://limon.top/reading-record</id>
    <content type="html"><![CDATA[<h2>Ask and Answer</h2>

<p><a href="http://stackoverflow.com/questions/24788283/ios-animate-morph-shape-from-circle-to-square">圆形和正方形之间的动画</a></p>

<p><a href="http://codingobjc.com/blog/2014/10/15/shi-yong-autolayoutshi-xian-uitableviewde-celldong-tai-bu-ju-he-ke-bian-xing-gao/">使用Autolayout实现UITableView的Cell动态布局和高度动态改变</a></p>

<p><a href="http://stackoverflow.com/questions/20320591/uitableview-and-presentviewcontroller-takes-2-clicks-to-display">UITableView点击两次才能Present</a></p>

<p><a href="http://www.it165.net/pro/html/201503/36130.html">iOS推送获取不到设备token：未找到应用程序的apsenvironment的权利字符串</a></p>

<p><a href="http://stackoverflow.com/questions/35023904/is-there-way-to-define-compare-function-automatically-for-struct-in-swi">假设有一个巨大（包含很多属性的）的结构体，然后实现 “==” 操作就会很麻烦，因为要每个属性都比较一遍才行</a> &mdash; 👍👍👍</p>

<h2>包罗万象</h2>

<p><a href="https://realm.io/cn/news/jack-nutting-search-api-ios/">iOS 系统搜索集成</a> &mdash; Realm</p>

<p><a href="http://www.devtalking.com/articles/ios-design-pattern-in-swift-1/">Swift 中的iOS设计模式（一）</a></p>

<p><a href="http://swiftist.org/topics/165">Swift 编程风格指南</a></p>

<p><a href="http://nshipster.com/new-years-2016">Reader Submissions - New Year&rsquo;s 2016</a> &mdash; 干货多 🍺</p>

<p><a href="http://stackoverflow.com/questions/24183812/swift-warning-equivalent">Showing TODO as a warning in a Swift Xcode project</a> &mdash; 以⚠️的形式显示TODO、FIXME</p>

<p><a href="http://mikebuss.com/2014/06/22/lazy-initialization-swift/">Lazy Initialization with Swift</a></p>

<p><a href="https://github.com/callmewhy/Swift90Days/blob/master/Day11-initialization.md">Swift90Days - 蛋疼的初始化过程</a></p>

<p><a href="http://nomothetis.svbtle.com/error-handling-in-swift">Error Handling in Swift: Might and Magic</a></p>

<p><a href="http://natashatherobot.com/swift-guard-better-than-if/">Swift 2.0: Why Guard is Better than If</a></p>

<p><a href="https://github.com/100mango/zen/blob/master/2015%20WWDC%20%E6%80%BB%E7%BB%93/2015%20WWDC%20Best%20Practices.md">2015 WWDC Best Practices</a></p>

<p><a href="http://swifter.tips/lazy/">LAZY 修饰符和 LAZY 方法</a></p>

<p><a href="http://oleb.net/blog/2015/12/lazy-properties-in-structs-swift/">Lazy Properties in Structs</a></p>

<p><a href="http://www.obqo.de/blog/2015/11/25/true-lazy-sequences/">True Lazy Sequences</a></p>

<p><a href="http://swift.gg/2015/09/25/ask-erica-how-do-i-loop-from-non-zero-n-swiftlang/">Swift 2.0 数组遍历</a></p>

<p><a href="http://www.mokacoding.com/blog/demistifying-swift-functor/">Swift Optionals, Functional Programming, and You</a> &mdash; 函数式编程</p>

<p><a href="http://www.cocoachina.com/ios/20150916/13324.html">用同一个工程创建两个不同版本的应用</a> &mdash; 如果同一个应用, 需要做一个带广告Lite版本, 一个不带广告的Pro版本. 那么问题来了, 该如何优雅的去实现呢？</p>

<p><a href="https://pspdfkit.com/blog/2015/presentation-controllers/">Presentation Controllers and Adaptive Presentations</a> &mdash; 👍</p>

<p><a href="https://www.omnigroup.com/developer/how-to-make-text-in-a-uivisualeffectview-readable-on-any-background">如何让 UIVisualEffectView 上面显示可读的文字</a></p>

<p><a href="http://www.zoomfeng.com/blog/coretextshi-yong-jiao-cheng-%5B%3F%5D.html">CoreText使用教程</a> &mdash; 五篇</p>

<p><a href="http://www.codeceo.com/article/https-worker.html">理解 HTTPS 的工作原理</a></p>

<p><a href="http://swift.gg/2016/01/07/app-thinning-appcoda/">如何使用 iOS 9 App 瘦身功能</a></p>

<p><a href="http://blog.sunnyxx.com/2014/12/20/64-bit-tips/">64-bit Tips</a></p>

<p><a href="http://blog.sunnyxx.com/2014/10/15/behind-autorelease/">黑幕背后的Autorelease</a></p>

<p><a href="http://mobile.51cto.com/iphone-284112.htm">Objective-C内存管理如何理解Autorelease</a></p>

<p><a href="http://cocoa.venj.me/blog/view-controller-based-status-bar-style-and-uinavigationcontroller/#comment-1501032470">UINavigationController和View Controller-based状态栏风格</a> &mdash;&mdash; 指定状态栏风格</p>

<p><a href="http://gracelancy.com/blog/2014/05/05/variable-argument-lists/">Variable Argument Lists</a> &mdash;&mdash; 可变参数函数的定义</p>

<p><a href="http://www.imooc.com/wenda/detail/244497">100个iOS开发/设计面试题汇总</a></p>

<p><a href="http://codingobjc.com/blog/2014/10/15/shi-yong-autolayoutshi-xian-uitableviewde-celldong-tai-bu-ju-he-ke-bian-xing-gao/">使用Autolayout实现UITableView的Cell动态布局和高度动态改变</a></p>

<p><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用 Git 命令清单</a></p>

<p><a href="http://flexmonkey.blogspot.co.nz/2015/12/scribe-handwriting-recognition.html"> 手写识别组建 A Handwriting Recognition Component for iOS </a></p>

<p><a href="http://www.jianshu.com/p/98610bdc9bd6"> 加密解密介绍 </a></p>

<p><a href="http://tanqisen.github.io/blog/2014/06/06/how-to-prevent-app-crack/">如何防止客户端被破解</a></p>

<p><a href="http://tech.glowing.com/cn/change-uinavigationbar-backgroundcolor-dynamically/">动态修改UINavigationBar的背景色</a></p>

<p><a href="http://www.jianshu.com/p/4af3b8179136">iOS开发中用户密码应该保存在哪里</a></p>

<p><a href="http://oncenote.com/2015/06/01/How-App-Launch/">由 App 的启动说起</a> &mdash; 👍</p>

<p><a href="https://medium.com/@pcperini/a-protocol-oriented-state-machine-for-layout-constraints-2c6c94bbd844#.g92o77vfm">State Machine for Layout Constraints</a> &mdash; 通过协议实现 Layout 的状态机 👍👍👍</p>

<p><a href="http://alisoftware.github.io/swift/async/error/2016/02/06/async-errors/">Asynchronous error handling</a></p>

<h5>Enum</h5>

<p><a href="http://swift.gg/2015/11/20/advanced-practical-enum-examples/">Swift 中枚举高级用法及实践</a></p>

<p><a href="http://ericasadun.com/2015/10/19/sets-vs-dictionaries-smackdown-in-swiftlang/?utm_campaign=Swift%252BSandbox&amp;utm_medium=email&amp;utm_source=Swift_Sandbox_12">用枚举作 Options</a></p>

<p><a href="http://swift.gg/2015/11/20/advanced-practical-enum-examples/#API_%E7%AB%AF%E7%82%B9">用枚举作 Rest API</a></p>

<h5>Protocol</h5>

<p><a href="http://natashatherobot.com/protocol-oriented-segue-identifiers-swift/">Protocol-Oriented Segue Identifiers in Swift</a></p>

<p><a href="http://swift.gg/2015/12/15/mixins-over-inheritance/">Mixins 比继承更好</a> &mdash; 面向协议编程</p>

<h4>翻译</h4>

<p><a href="http://wdxtub.com/2015/12/22/programming-ios9-translation-1/">Programming iOS9 翻译</a></p>

<h2>优化</h2>

<p><a href="http://pingguohe.net/2016/01/31/lazyscroll.html?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io">iOS 高性能异构滚动视图构建方案 —— LazyScrollView</a></p>

<p><a href="http://irace.me/swift-profiling/?utm_campaign=iOS%2BDev%2BWeekly&amp;utm_medium=email&amp;utm_source=iOS_Dev_Weekly_Issue_234">Profiling your Swift compilation times</a> &mdash; 查看 Swift 文件编译的时间 👍👍👍👍👍👍</p>

<p><a href="http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&amp;mid=444322139&amp;idx=1&amp;sn=c7bef4d439f46ee539aa76d612023d43&amp;scene=0#wechat_redirect">猿题库 iOS 客户端架构设计</a> &mdash; MVVM without Binding with DataController</p>

<p><a href="http://blog.vars.me/blog/2015/04/26/UICollectionView-Optimizing/">UICollectionView的数据预加载及图片加载逻辑的优化</a></p>

<p><a href="https://github.com/100mango/zen/blob/master/WWDC%E5%BF%83%E5%BE%97%EF%BC%9AAdvanced%20Graphics%20and%20Animations%20for%20iOS%20Apps/Advanced%20Graphics%20and%20Animations%20for%20iOS%20Apps.md">iOS图形性能进阶与测试</a></p>

<p><a href="http://blog.cnbang.net/tech/2578/">iOS图片加载速度极限优化—FastImageCache解析</a></p>

<p><a href="http://blog.cnbang.net/tech/2544/">iOS可执行文件瘦身方法</a></p>

<p><a href="http://www.jianshu.com/p/0d972f45da86?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=pc_author_hots&amp;utm_source=recommendation">iOS生产力之小工具合集</a>
<a href="http://www.jianshu.com/p/9e1f0b44935c">iOS性能优化</a></p>

<p><a href="http://ios.jobbole.com/83058/">10个加速Table Views开发的建议</a></p>

<p><a href="http://www.ibm.com/developerworks/cn/mobile/mo-ios-memory/">使用 Swift 和 Objective-C 执行 iOS 内存管理的 7 个简单技巧</a></p>

<p><a href="http://southpeak.github.io/blog/2015/12/20/perfect-smooth-scrolling-in-uitableviews/">Perfect smooth scrolling in UITableViews</a></p>

<p><a href="http://holko.pl/2016/01/05/typed-table-view-controller/">Typed, yet Flexible Table View Controller</a> &mdash; TableViewController 代码重构</p>

<h3>缓存</h3>

<p><a href="http://www.jianshu.com/p/8a4dc775c051">(慕课网)imooc iPhone3.3 接口数据缓存</a> &mdash; 👍👍👍</p>

<p><a href="https://github.com/ChenYilong/ParseSourceCodeStudy/blob/master/02_Parse%E7%9A%84%E7%BD%91%E7%BB%9C%E7%BC%93%E5%AD%98%E4%B8%8E%E7%A6%BB%E7%BA%BF%E5%AD%98%E5%82%A8/iOS%E7%BD%91%E7%BB%9C%E7%BC%93%E5%AD%98%E6%89%AB%E7%9B%B2%E7%AF%87.md">使用两行代码就能完成80%的缓存需求</a> &mdash; 👍👍👍</p>

<h2>底层</h2>

<p><a href="https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=400417748&amp;idx=1&amp;sn=0c5f6747dd192c5a0eea32bb4650c160&amp;scene=1&amp;srcid=1119iAGp9HUSGEMTBjUSM7L0&amp;key=d72a47206eca0ea9f5fd845c39ebee1715577b3db18f002c19b3747d6f2525f50d9ef530d825ee227e428e6dc5bd58a3&amp;ascene=0&amp;uin=MjY5MzMxNTMwMQ%3D%3D">iOS 事件处理机制与图像渲染过程</a></p>

<p><a href="http://swift.gg/2015/12/28/friday-qa-2015-12-11-swift-weak-references/">Swift 中的弱引用</a> &mdash; 👍👍👍</p>

<h2>内存管理</h2>

<p><a href="http://www.oschina.net/translate/automatic-reference-counting-on-ios">iOS开发之ARC</a></p>

<p><a href="http://onevcat.com/2012/06/arc-hand-by-hand/">手把手教你ARC——iOS/Mac开发ARC入门和使用</a></p>

<p><a href="http://blog.csdn.net/nicktang/article/details/6792972">IOS 5编程 内存管理 ARC技术概述</a></p>

<p><a href="http://www.yifeiyang.net/development-of-the-iphone-simply-1/">iPhone开发之深入浅出 (1) — ARC是什么</a></p>

<h2>线程</h2>

<p><a href="http://blog.cnbluebox.com/blog/2014/07/01/cocoashen-ru-xue-xi-nsoperationqueuehe-nsoperationyuan-li-he-shi-yong/">Cocoa深入学习:NSOperationQueue、NSRunLoop和线程安全</a></p>

<p><a href="http://www.cnblogs.com/kenshincui/p/3983982.html">iOS开发系列&ndash;并行开发其实很容易</a></p>

<p><a href="http://ksnowlv.github.io/blog/2014/09/07/ios-tong-bu-suo-xing-neng-dui-bi/">iOS同步对象性能对比</a></p>

<h2>工具</h2>

<p><a href="http://www.bmob.cn">Bmob移动后端云服务平台</a></p>

<p><a href="https://leancloud.cn/docs/rest_api.html">和应用服务器、存储服务器说再见</a></p>

<h2>插件</h2>

<p><a href="https://github.com/wangshengjia/VWInstantRun">VWInstantRun</a> &mdash; 直接在Xcode中编译执行选中的Swift代码，打印输出到console  👍</p>

<h2>CoreData</h2>

<p><a href="http://www.jianshu.com/p/5a84008307ad">Core Data: 非标准数据类型总结</a></p>

<h2>CocoaPods</h2>

<p><a href="http://blog.devtang.com/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/">用CocoaPods做iOS程序的依赖管理</a></p>

<p><a href="http://gracelancy.com/blog/2013/08/11/make-your-own-cocoapods-spec/">制作自己的CocoaPods Spec</a></p>

<p><a href="http://www.iwangke.me/2013/04/18/advanced-cocoapods/">CocoaPods进阶：本地包管理</a></p>

<p><a href="http://lexrus.com/setup-a-mirror-of-cocoapods-specs.html">Setup a mirror of CocoaPods/Specs</a></p>

<p><a href="http://blog.csdn.net/agdsdl/article/details/45218987#0-tsina-1-51027-397232819ff9a47a7b7e80a40613cfe1">CocoaPods建立私有仓库</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactiveCocoa]]></title>
    <link href="http://limon.top/reactivecocoa/"/>
    <updated>2014-09-03T17:44:25+08:00</updated>
    <id>http://limon.top/reactivecocoa</id>
    <content type="html"><![CDATA[<h1>ReactiveCocoa</h1>

<h2>RACSignal</h2>

<h3>订阅RACSignal</h3>

<p>1.RACSignal (Subscription)
RACSignal (Subscription)类别可以看到所有的订阅事件的方法，每个方法都会将类型为(void (^)(id x))的block作为参数，当事件发生时block中的代码会执行，例如-subscribeNext:方法会传入一个block作为参数，当Signal的next事件发出后，block会接收到事件并执行。</p>

<p>2.UIKit Category
RAC为UIKit添加了很多类别来让我们可以订阅UI组件的事件，比如UITextField (RACSignalSupport)中的rac_textSignal会在文本域内容变化时发出next事件。
事件包含的内容可以是类型，只要是对象就行，如果是一些数字，布尔值等字面量，可以用@()语法装箱成NSNumber。</p>

<h3>操纵Signal</h3>

<h5>1.RACStream (Operations)</h5>

<p><code>-filter</code>:uses a block to test each value. Returns a new stream with only those values that passed.</p>

<pre><code>- (instancetype)filter:(BOOL (^)(id value))block;
    RACSequence *numbers = [@"1 2 3 4 5 6 7 8 9" componentsSeparatedByString:@"     "].rac_sequence;

// Contains: 2 4 6 8
RACSequence *filtered = [numbers filter:^ BOOL (NSString *value) {
    return (value.intValue % 2) == 0;
}];
</code></pre>

<p><code>-map</code>:Maps block across in the receiver , and transform the values. Returns a new stream with the mapped values.</p>

<pre><code>- (instancetype)map:(id (^)(id value))block;
    RACSequence *letters = [@"A B C D E F G H I" componentsSeparatedByString:@"     "].rac_sequence;

// Contains: AA BB CC DD EE FF GG HH II
RACSequence *mapped = [letters map:^(NSString *value) {
    return [value stringByAppendingString:value];
}];
</code></pre>

<p><code>-flattenMap</code>:Maps block across the values in the receiver and flattens the result. It is used to signal of signal.简单理解为：取出内部的Signal.</p>

<pre><code>[[[self.signInButton
    rac_signalForControlEvents:UIControlEventTouchUpInside]
        map:^id(id x) {
            return [self signInSignal]; // 此signal内含一个BOOL signal
    }]
    subscribeNext:^(id x) {
        NSLog(@"Sign in result: %@", x);
}];
</code></pre>

<p>打印出来的不是BOOL，<code>-subscribeNex</code>t: will execute the block whenever the signal sends a value. 但这value不包括 signal of signals：an outer signal that contains an inner signal.</p>

<pre><code>2014-01-08 21:00:25.919 RWReactivePlayground[33818:a0b] Sign in result: 
                        &lt;RACDynamicSignal: 0xa068a00&gt; name:+createSignal:
</code></pre>

<figure class='code'><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class=''><span class='line'>[[[self.signInButton
</span><span class='line'>   rac_signalForControlEvents:UIControlEventTouchUpInside]
</span><span class='line'>   flattenMap:^id(id x) { // subscribe to the inner signal within the outer signal’s
</span><span class='line'>     return [self signInSignal];
</span><span class='line'>   }]
</span><span class='line'>   // Output: Sign in result: 0
</span><span class='line'>   subscribeNext:^(id x) {
</span><span class='line'>     NSLog(@"Sign in result: %@", x);
</span><span class='line'>   }];</span></code></pre></td></tr></table></div></figure>


<h4>2.RACSignal (Operations)</h4>

<h2>RACObserve</h2>

<pre><code>// When self.username changes, logs the new name to the console.
//
// RACObserve(self, username) creates a new RACSignal that sends the current
// value of self.username, then the new value whenever it changes.
// -subscribeNext: will execute the block whenever the signal sends a value.
[RACObserve(self, username) subscribeNext:^(NSString *newName) {
    NSLog(@"%@", newName);
}];
</code></pre>

<h4>过滤signal</h4>

<pre><code>// Only logs names that starts with "j".
//
// -filter returns a new RACSignal that only sends a new value when its block
// returns YES.
[[RACObserve(self, username)
    filter:^(NSString *newName) {
        return [newName hasPrefix:@"j"];
    }]
    subscribeNext:^(NSString *newName) {
        NSLog(@"%@", newName);
}];
</code></pre>

<h2>Chip</h2>

<p><code>distinctUntilChanged</code>：Returns a stream of values for which -isEqual: returns NO when compared to the previous value.
用来确保signal只会发送不同的值,比较数值流中当前值和上一个值，如果不同，就返回当前值，简单理解,它将这一次的值与上一次做比较，当相同时（也包括- isEqual:）被忽略掉。</p>

<pre><code>RACSignal *validSearchSignal =
[[RACObserve(self, searchText)
  map:^id(NSString *text) {
     return @(text.length &gt; 3);
  }]
  distinctUntilChanged]; // ensure this signal only emits values when the state changes.

[validSearchSignal subscribeNext:^(id x) {
    NSLog(@"search text is valid %@", x);
}];

self.executeSearch =
[[RACCommand alloc] initWithEnabled:validSearchSignal // validSearchSignal决定button能不能点击
  signalBlock:^RACSignal *(id input) {
    return  [self executeSearchSignal];
  }];
</code></pre>

<p>例子二：比如UI上一个Label绑定了一个值，根据值更新显示的内容:</p>

<pre><code>RAC(self.label, text) = [RACObserve(self.user, username) distinctUntilChanged];
self.user.username = @"sunnyxx"; // 1st
self.user.username = @"sunnyxx"; // 2nd
self.user.username = @"sunnyxx"; // 3rd 
</code></pre>

<p>所以，对于相同值可以忽略的情况，果断加上它吧。</p>

<p><code>-takeUntilBlock</code>：对于每个next值，运行block，当block返回YES时停止取值，如：</p>

<pre><code>[[self.inputTextField.rac_textSignal takeUntilBlock:^BOOL(NSString *value) {
    return [value isEqualToString:@"stop"];
}] subscribeNext:^(NSString *value) {
    NSLog(@"current value is not `stop`: %@", value);
}];
</code></pre>

<blockquote><p>Note：停止取值的意思是，输入stop之后，无论输入什么都不会再取值，即输入stop之后，不会再有任何输出。
还有一个例子：</p></blockquote>

<pre><code>- (RACSignal*) rac_RequestStateSignal
{
    return [[RACObserve(self, state)
        takeUntilBlock:^ BOOL (NSNumber *state){
            return [state intValue] == iRequestStateComplete;
        }]
        flattenMap:^(NSNumber *state){
            if ([state intValue] == iRequestStateErrored)
            { 
                // Create a meaningful NSError here if you can.
                return [RACSignal error:nil];
            }
            else
            { 
                return [RACSignal return:state];
            }
        }];
}
</code></pre>

<p><code>-switchToLatest</code>方法用于signal-of-signals，它总是输出最新的信号的值。</p>

<pre><code>RACSubject *letters = [RACSubject subject];
RACSubject *numbers = [RACSubject subject];
RACSubject *signalOfSignals = [RACSubject subject];

RACSignal *switched = [signalOfSignals switchToLatest];

// Outputs: A B 1 D
[switched subscribeNext:^(NSString *x) {
    NSLog(@"%@", x);
}];

[signalOfSignals sendNext:letters]; // 打印letters信号内的值
[letters sendNext:@"A"];
[letters sendNext:@"B"];

[signalOfSignals sendNext:numbers]; // 打印numbers信号内的值
[letters sendNext:@"C"];
[numbers sendNext:@"1"];

[signalOfSignals sendNext:letters]; // 打印letters信号内的值
[numbers sendNext:@"2"];
[letters sendNext:@"D"];
</code></pre>

<p><code>-rac_signalForSelector:fromProtocol:</code></p>

<p>这个方法主要是把 protocal 转为一个 Signal 便于使用。值得注意的是这个函数返回的是一个 RACTuple。 这个 RACTuple 包含了 Selector 方法里面所有的参数</p>

<p><code>-rac_liftSelector:withSignalsFromArray:</code>
这个方法它的意思是当传入的 Signals 都至少sendNext过一次，接下来只要其中任意一个signal有了新的内容。就会去触发第一个 selector 参数的方法。</p>

<blockquote><p><a href="http://iiiyu.com/2014/12/26/learning-ios-notes-thirty-six/">ReactiveCocoa 用 RACSignal 替代 Delegate</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactiveCocoa的三种基本的模式]]></title>
    <link href="http://limon.top/reactivecocoa/"/>
    <updated>2014-06-10T09:35:03+08:00</updated>
    <id>http://limon.top/reactivecocoa</id>
    <content type="html"><![CDATA[<h1>ReactiveCocoa</h1>

<hr />

<h3>三种基本的模式</h3>

<p>在ReactiveCocoa中有三种基本的模式：责任链、分割和组合模式（chaining, splitting, and combining）。</p>

<h4>一、 Chaining模式</h4>

<p>Chaining，将一个已有的signal转换为一个新的signal。常用的操作是创建一个新的signal，再对它使用filter:、map:或startWith:等方法。</p>

<figure class='code'><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class=''><span class='line'>RAC(self.textField.text) = [[[RACSignal interval:1] startWith:[NSDate date]] map:^id(NSDate *value) {  
</span><span class='line'>    NSDateComponents *dateComponents = [[NSCalendar currentCalendar] components:NSMinuteCalendarUnit | NSSecondCalendarUnit fromDate:value];  
</span><span class='line'>      
</span><span class='line'>    return [NSString stringWithFormat:@"%d:%02d", dateComponents.minute, dateComponents.second];  
</span><span class='line'>}]; 
</span></code></pre></td></tr></table></div></figure>


<p>我们将textFiled的text属性绑定为三个串连的signals的结果。首先，我们创建一个间隔信号，这个信号每隔一秒钟就发送当前时间。间隔信号在没有启动的时候是不会有值的，所以我们使用startWith:启动起来。最后，使用map:将signal的NSDate值转换为一个NSString字符串，这个字符串将会被赋值到textField的text属性上。
<img src="http://teehanlax.com.s3.amazonaws.com/wordpress/wp-content/uploads/chaining.png" alt="Chaining" /></p>

<p> Chaining是最常用的操作，而且它通常不使用局部变量，而是像上面那样串连起来操作。下面的代码与上面的代码是等同的。</p>

<figure class='code'><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class=''><span class='line'>RACSignal *intervalSignal = [RACSignal interval:1];  
</span><span class='line'>RACSignal *startedIntervalSignal = [intervalSignal startWith:[NSDate date]];  
</span><span class='line'>RACSignal *mappedIntervalSignal = [startedIntervalSignal map:^id(NSDate *value) {  
</span><span class='line'>    NSDateComponents *dateComponents = [[NSCalendar currentCalendar] components:NSMinuteCalendarUnit | NSSecondCalendarUnit fromDate:value];  
</span><span class='line'>      
</span><span class='line'>    return [NSString stringWithFormat:@"%d:%02d", dateComponents.minute, dateComponents.second];  
</span><span class='line'>}];  
</span><span class='line'>   
</span><span class='line'>RAC(self.textField.text) = mappedIntervalSignal;  </span></code></pre></td></tr></table></div></figure>


<h4>二、Splitting模式</h4>

<p>Splitting与chaining比较类似，也是将signal转换为其它的sginal，不同之处在于，Splitting会重复使用signal。Splitting看起来要复杂些，其实也就是一个signal使用多次。</p>

<figure class='code'><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class=''><span class='line'>RACSignal *dateComponentsSignal = [[[RACSignal interval:1] startWith:[NSDate date]] map:^id(NSDate *value) {  
</span><span class='line'>    NSDateComponents *dateComponents = [[NSCalendar currentCalendar] components:NSMinuteCalendarUnit | NSSecondCalendarUnit fromDate:value];  
</span><span class='line'>    return dateComponents;  
</span><span class='line'>}];  
</span><span class='line'>   
</span><span class='line'>RAC(self.minuteTextField.text) = [dateComponentsSignal map:^id(NSDateComponents *dateComponents) {  
</span><span class='line'>    return [NSString stringWithFormat:@"%d", dateComponents.minute];  
</span><span class='line'>}];  
</span><span class='line'>   
</span><span class='line'>RAC(self.secondTextField.text) = [dateComponentsSignal map:^id(NSDateComponents *dateComponents) {  
</span><span class='line'>    return [NSString stringWithFormat:@"%d", dateComponents.second];  
</span><span class='line'>}];  </span></code></pre></td></tr></table></div></figure>


<p>在上面这个例子中，创建了一个signal，即局部变量：dateComponentsSignal。接着再用dateComponentsSignal创建两个新的signal，并将它们分别与两个textfield的text属性进行绑定。</p>

<blockquote><p>Note: 把dateComponentsSignal看作一个局部变量，就像,int a = 9; 然后多次使用a来计算。</p></blockquote>

<p><img src="http://teehanlax.com.s3.amazonaws.com/wordpress/wp-content/uploads/Splitting.png" alt="Splitting" /></p>

<h4>三、Combining模式</h4>

<p>combining就是将几个signal结合起来创建出一个新的signal。比如“登录”按钮，只有在“用户名”与“密码”输入框中的文本长度都超过6时才能被点击，否则处于不可用的状态。那么我们可以为“登录”按钮的enabled状态创建一个signal，这个signal则是由“用户名”与“密码”框它们两个自己的signal组合起来：</p>

<figure class='code'><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class=''><span class='line'>RAC(self.submitButton.enabled) = [RACSignal combineLatest:@[self.usernameField.rac_textSignal, self.passwordField.rac_textSignal] reduce:^id(NSString *userName, NSString *password) {  
</span><span class='line'>    return @(userName.length &gt;= 6 && password.length &gt;= 6);  
</span><span class='line'>}]; </span></code></pre></td></tr></table></div></figure>


<p>在这里，我们将“登录”按钮的enable状态绑定到使用combineLatest:reduce:方法创建的signal上。这个方法的第二个参数是一个block，这个block的参数是combineLatest中的参数的<strong>最新值</strong>的组合。我们将两个文本框的text signal一起传到combineLatest，在reduce的block中，该block也就会接收到两个NSString的参数，这个block的工作就是将两个参数值组合起来生成一个值，然后返回。该方法的说明：</p>

<figure class='code'><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class=''><span class='line'>// +combineLatest:reduce: takes an array of signals, executes the block with the
</span><span class='line'>// latest value from each signal whenever any of them changes, and returns a new
</span><span class='line'>// RACSignal that sends the return value of that block as values.</span></code></pre></td></tr></table></div></figure>


<p><img src="http://teehanlax.com.s3.amazonaws.com/wordpress/wp-content/uploads/combining.png" alt="Combining" /></p>

<p>Combining常用于两种情况：</p>

<ol>
<li>需要同时满足多种条件。</li>
<li>在多个signal中进行选择。</li>
</ol>


<h2>优秀文章</h2>

<p><a href="http://www.teehanlax.com/blog/getting-started-with-reactivecocoa/">Getting Started with ReactiveCocoa</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#01-字面量语法]]></title>
    <link href="http://limon.top/number-01-zi-mian-liang-yu-fa/"/>
    <updated>2014-05-26T12:40:19+08:00</updated>
    <id>http://limon.top/number-01-zi-mian-liang-yu-fa</id>
    <content type="html"><![CDATA[<h2>字面量数值</h2>

<p>普通创建：</p>

<pre><code>NSNumber *num = [NSNumber numberWithInt:1];
</code></pre>

<p>字面量创建</p>

<pre><code>NSNumber *nub = @1;

int a = 5;
float b = 5.32f;
NSNumber *num = @(a * b);
</code></pre>

<h2>字面量数组</h2>

<p>普通创建</p>

<pre><code>NSArray *fruits = [NSArray arrayWithObjects:@"Lemon",@"Apple",nil];
[fruits objectAtIndex:1]; // Apple
</code></pre>

<p>字面量创建</p>

<pre><code>NSArray *fruits = @[@"Lemon",@"Apple"];
fruits[1]; // Apple
</code></pre>

<p><code>fruits[1]</code>这称为取下标操作(subscripting)</p>

<h2>nil</h2>

<p>字面量创建数组，若数组元素对象中有nil，会抛出异常。因为字面量语法实际上是一种语法糖(syntactic sugar)，其效果等于是先创建了一个数组，然后把方括号内的所有对象都加到这个数组。</p>

<pre><code>NSObject *nilObject = nil;
NSArray *fruits = @[@"Lemon",nilObject,@"Apple"]; // 崩了
</code></pre>

<p>如果不用字面量创建，用<code>NSArray arrayWithObjects:</code>则不会抛出异常，只会提前结束。如下例子，遇到nil结束，fruits只有一个元素</p>

<pre><code>NSObject *nilObject = nil;
NSArray *fruits = [NSArray arrayWithObjects:@"Lemon",nilObject,@"Apple",nil];
</code></pre>

<blockquote><p>微妙的差别表明，使用字面量语法更安全。向数组插入nil通常说明程序有错，而通过异常可以更快地发现这个错误。</p></blockquote>

<h2>字面量字典</h2>

<p>值 -> 键：普通创建</p>

<pre><code>NSDictionary *personData = [NSDictionary dictionaryWithObjectsAndKeys:@"Tom",@"name",[NSNumber numberWithInt:18],@"age", nil];
[personData objectForKey:@"name"]; // Tom
</code></pre>

<p>键 -> 值：字面量语法创建</p>

<pre><code>NSDictionary *personData = @{@"name": @"Tom",@"age":@18};
personData[@"age"]; // 18
</code></pre>

<h2>可变数组和字典</h2>

<p>如果数组与字典对象是可变的(mutable)，也可以通过下标修改可变数组或字典的值</p>

<pre><code>mutableArray[1] = @"dog";
mutableDictionary[@"name"] = @"Mary";
</code></pre>

<p>普通做法：</p>

<pre><code>[mutableArray replaceObjectAtIndex:1 withObject:@"dog"];
[mutableDic setObject:@"Mary" forKey:@"name"];
</code></pre>

<h2>局限</h2>

<p>使用字面量语法创建出来的字符串、数组、字典对象都是不可变的(immutable),若想可变版本的对象，则需要赋值一份</p>

<pre><code>NSMutableDictionary *mutableDic = [@{@"name": @"Tom",@"age":@18} mutableCopy];
</code></pre>

<h2>要点</h2>

<ul>
<li>应该使用字面量语法创建字符串、数值、数组、字典。与创建此类对象的常规方法相比，更加简明扼要。</li>
<li>应该通过下标来访问数组和字典</li>
<li>用字面量语法创建数组或字典时，若值中有nil，会抛出异常。</li>
</ul>


<h2>番外</h2>

<p>JSON格式，一对 <code>{ }</code> 代表一个字典，一对<code>[]</code>代表一个数组</p>

<pre><code>{
    "result": 1,

    "school_list": [
        {
            "id": "5",
            "school_name": "清华大学"             
        },
        {
            "id": "6",
            "school_name": "北京邮电大学"
        }
    ],

    "school_near": "北京交通大学"
}
</code></pre>

<p>从JSON<strong>字典</strong>中通过键<code>school_list</code>取出数组对象</p>

<pre><code>NSArray *arr = json[@"school_list"];
NSArray *arr = [json objectForKey:@"school_list"];
</code></pre>

<p>arr数组的元素是一个个字典，遍历数组得到字典内的学校名</p>

<pre><code>for( int i=0; i&lt;arr.count; i++){
        NSString *schoolName = arr[i][@"school_name"];
        NSString *schoolName = [[arr objectAtIndex:i] objectForKey:@"school_name"];
    }
</code></pre>

<p>其实arr数组就是PHP内的二维数组，只不过在OS中，</p>

<ul>
<li>数组 - 下标为数字（PHP中的索引数组）</li>
<li>字典 - 下标为字符串（PHP中的关联数组）</li>
</ul>


<p>上面例子中二维数组arr的遍历，通过数字下标遍历二维数组中的所有元素，然后通过字符串下标取出学校名。</p>

<blockquote><p>下标也称为键</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转Mantle]]></title>
    <link href="http://limon.top/mantlede-shi-yong/"/>
    <updated>2014-04-23T10:05:15+08:00</updated>
    <id>http://limon.top/mantlede-shi-yong</id>
    <content type="html"><![CDATA[<h2>MTLModel</h2>

<p>MTLModel provides an easy way to map NSDictionary objects to Objective-C classes and vice-versa.</p>

<p>假设返回的JSON为：</p>

<figure class='code'><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class=''><span class='line'> {
</span><span class='line'>  "uid": 1,
</span><span class='line'>  "title": "Found a bug",
</span><span class='line'>  "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
</span><span class='line'>  "number": 1347,
</span><span class='line'>  "state": "open",
</span><span class='line'>  "user": {
</span><span class='line'>    "login": "octocat",
</span><span class='line'>    "id": 1
</span><span class='line'>  },
</span><span class='line'>  "assignee": {
</span><span class='line'>    "login": "octocat",
</span><span class='line'>    "id": 1,
</span><span class='line'>    "type": "User"
</span><span class='line'>  }
</span><span class='line'>  "created_at": "2011-04-22T13:33:48Z",
</span><span class='line'>  "awesome": true  
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>继承<code>MTLModel</code>遵守<code>&lt;MTLJSONSerializing&gt;</code>协议</p>

<figure class='code'><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;Mantle.h&gt;
</span><span class='line'>
</span><span class='line'>typedef enum : NSUInteger {
</span><span class='line'>    GHIssueStateOpen,
</span><span class='line'>    GHIssueStateClosed
</span><span class='line'>} GHIssueState;
</span><span class='line'>
</span><span class='line'>@interface GHIssue : MTLModel&lt;MTLJSONSerializing&gt;
</span><span class='line'>@property (nonatomic, copy, readonly) NSNumber *uid;
</span><span class='line'>@property (nonatomic, copy, readonly) NSURL *URL;
</span><span class='line'>@property (nonatomic, copy, readonly) NSNumber *number;
</span><span class='line'>@property (nonatomic, assign, readonly) GHIssueState state;
</span><span class='line'>@property (nonatomic, copy, readonly) NSString *reporterLogin;
</span><span class='line'>@property (nonatomic, copy, readonly) NSDate *updatedAt;
</span><span class='line'>@property (nonatomic, strong, readonly) GHUser *assignee;
</span><span class='line'>@property(nonatomic, getter=isAwesome) BOOL awesome;
</span><span class='line'>@property (nonatomic, copy) NSString *title;
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p><code>&lt;MTLJSONSerializing&gt;</code>协议告诉Mantle序列化该对象如何从JSON映射到Objective-C的属性。</p>

<h3>NSValueTransformer</h3>

<p>在.m文件，实现<code>&lt;MTLJSONSerializing&gt;</code>的协议<code>@required</code>的方法<code>+ (NSDictionary *)JSONKeyPathsByPropertyKey</code>
它指明了如何把json的keypath和Model的属性对应起来</p>

<figure class='code'><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class=''><span class='line'>+ (NSDictionary *)JSONKeyPathsByPropertyKey {
</span><span class='line'>  // properties defined in header  :  key in JSON Dictionary，本地字段在前，服务端字段在后
</span><span class='line'>    return @{
</span><span class='line'>        @"URL": @"url",
</span><span class='line'>        @"HTMLURL": @"html_url",
</span><span class='line'>        @"reporterLogin": @"user.login",
</span><span class='line'>        @"assignee": @"assignee",
</span><span class='line'>        @"updatedAt": @"updated_at"
</span><span class='line'>    };
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>因为如果属性名和JSON的键名一致时，可以省略不写映射，例如title</p>

<p>以上分了几种情况：
Mantle使用主要看属性property中的类型，主要分几种：</p>

<ol>
<li>NSNumber、NSString&hellip;.</li>
<li>NSArray</li>
<li>NSURL</li>
<li>NSDate</li>
<li>枚举</li>
<li>模型</li>
<li>BOOL</li>
</ol>


<p>先介绍一个方法：<code>+ (NSValueTransformer *)JSONTransformerForKey:(NSString *)key</code></p>

<figure class='code'><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class=''><span class='line'>// Specifies how to convert a JSON value to the given property key. If
</span><span class='line'>// reversible, the transformer will also be used to convert the property value
</span><span class='line'>// back to JSON.
</span><span class='line'>//
</span><span class='line'>// If the receiver implements a `+&lt;key&gt;JSONTransformer` method, MTLJSONAdapter
</span><span class='line'>// will use the result of that method instead.
</span><span class='line'>//
</span><span class='line'>// Returns a value transformer, or nil if no transformation should be performed.
</span><span class='line'>+ (NSValueTransformer *)JSONTransformerForKey:(NSString *)key;
</span></code></pre></td></tr></table></div></figure>


<p>以下方法的命名都要遵从：<code>SEL selector = MTLSelectorWithKeyPattern(key, "JSONTransformer");</code></p>

<p>1、一般像tittle，<code>@"title": @"title"</code>不用写这行也自动转化。我个人认为从服务器返回的所有数据都是字符串类型。所有理论上，uid还要用<code>NSValueTransformer</code>转化，如下：</p>

<pre><code>+ (NSValueTransformer *)uidJSONTransformer{
    return [MTLValueTransformer reversibleTransformerWithForwardBlock:^id(NSString *string) {
    return @([string integerValue]);
} reverseBlock:^id(NSNumber *number) {
    return [number stringValue];
}];
</code></pre>

<p>}</p>

<p>但是，如果你的uid属性类型定义为NSNumber，还是不需用上面的方法，应该是Mantle自己处理了。</p>

<blockquote><p>如果你定义的uid类型为NSUInteger，还是需要uidJSONTransformer</p></blockquote>

<p>还有一种情况是<code>@"reporterLogin": @"user.login"</code>
   login是在JSON内层的元素，需要用下面这个方法</p>

<pre><code class="```">   + (NSValueTransformer *)reporterLoginJSONTransformer {
        return [MTLValueTransformer reversibleTransformerWithForwardBlock:^(NSArray *values) {
            return [values firstObject];
        } reverseBlock:^(NSString *str) {
            return @[str];
        }];
    }
</code></pre>

<p>2、NSArray装模型</p>

<figure class='code'><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  name: "Bob",
</span><span class='line'>  cars: [
</span><span class='line'>    { make: "ford", year: "1972" },
</span><span class='line'>    { make: "mazda", year: "2000" }
</span><span class='line'>  ],
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class=''><span class='line'>@interface CarModel : MTLModel
</span><span class='line'>
</span><span class='line'>@property (nonatomic, strong) NSString *make;
</span><span class='line'>@property (nonatomic, strong) NSString *year;
</span><span class='line'>
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>@interface PersonModel : MTLModel
</span><span class='line'>
</span><span class='line'>@property (nonatomic, strong) NSString *name;
</span><span class='line'>@property (nonatomic, strong) NSArray *cars; // NSArra元素是Car模型
</span><span class='line'>
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class=''><span class='line'>+ (NSValueTransformer *)carsJSONTransformer {
</span><span class='line'>    return [NSValueTransformer mtl_JSONArrayTransformerWithModelClass:CarModel.class];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>3、NSURL</p>

<pre><code>+ (NSValueTransformer *)URLJSONTransformer {
    return [NSValueTransformer valueTransformerForName:MTLURLValueTransformerName];
}           
</code></pre>

<p>4、NSDate</p>

<figure class='code'><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>+ (NSDateFormatter *)dateFormatter {
</span><span class='line'>    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
</span><span class='line'>    dateFormatter.locale = [[NSLocale alloc] initWithLocaleIdentifier:@"en_US_POSIX"];
</span><span class='line'>    dateFormatter.dateFormat = @"yyyy-MM-dd'T'HH:mm:ss'Z'";
</span><span class='line'>    return dateFormatter;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>+ (NSValueTransformer *)updatedAtJSONTransformer { // 把"updated_at": "2011-04-22T13:33:48Z"传给ForwardBlock
</span><span class='line'>    return [MTLValueTransformer reversibleTransformerWithForwardBlock:^(NSString *str) {
</span><span class='line'>        return [self.dateFormatter dateFromString:str]; // 把dateFormatter再传给reverseBlock
</span><span class='line'>    } reverseBlock:^(NSDate *date) {
</span><span class='line'>        return [self.dateFormatter stringFromDate:date];
</span><span class='line'>    }]
</span><span class='line'>}
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>如果JSON的数据格式是Unix时间戳，&#8221;date&#8221;: 1418202490,</p>

<figure class='code'><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class=''><span class='line'>+ (NSValueTransformer *)dateJSONTransformer {
</span><span class='line'>    return [MTLValueTransformer reversibleTransformerWithForwardBlock:^(NSString *str) {
</span><span class='line'>        return [NSDate dateWithTimeIntervalSince1970:str.floatValue];
</span><span class='line'>    } reverseBlock:^(NSDate *date) {
</span><span class='line'>        return [NSString stringWithFormat:@"%f",[date timeIntervalSince1970]];
</span><span class='line'>    }];
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>5、枚举</p>

<figure class='code'><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class=''><span class='line'>+ (NSValueTransformer *)stateJSONTransformer {
</span><span class='line'>    return [NSValueTransformer mtl_valueMappingTransformerWithDictionary:@{
</span><span class='line'>        @"open": @(GHIssueStateOpen),
</span><span class='line'>        @"closed": @(GHIssueStateClosed)
</span><span class='line'>    }];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>6、模型</p>

<figure class='code'><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class=''><span class='line'>+ (NSValueTransformer *)assigneeJSONTransformer {
</span><span class='line'>    return [NSValueTransformer mtl_JSONDictionaryTransformerWithModelClass:GHUser.class];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>7、 BOOL</p>

<figure class='code'><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class=''><span class='line'>+ (NSValueTransformer *)awesomeJSONTransformer {
</span><span class='line'>    return [NSValueTransformer valueTransformerForName:MTLBooleanValueTransformerName];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>空对象处理</h2>

<p>在模型.m文件添加<code>-setNilValueForKey</code>，Mantle是基于KVC给property赋值的，KVC提供了<code>-setNilValueForKey</code>方法，让我们为nil指定一个合理的替代值</p>

<figure class='code'><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class=''><span class='line'>@interface MTLModel (KTVNullableScalar)
</span><span class='line'>@end
</span><span class='line'>@implementation MTLModel (KTVNullableScalar)
</span><span class='line'>- (void)setNilValueForKey:(NSString *)key {
</span><span class='line'>    [self setValue:@0 forKey:key];  // For NSInteger/CGFloat/BOOL
</span><span class='line'>}
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<h2>Create model objects from JSON</h2>

<figure class='code'><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class=''><span class='line'>// create NSDictionary from JSON data
</span><span class='line'>NSData JSONData = ... // the JSON response from the API
</span><span class='line'>NSError *error = nil;
</span><span class='line'>NSDictionary *JSONDict = [NSJSONSerialization JSONObjectWithData:JSONData options:0 error:&error];
</span><span class='line'>
</span><span class='line'>// create model object from NSDictionary using MTLJSONSerialisation
</span><span class='line'>CATProfile *profile = [MTLJSONAdapter modelOfClass:CATProfile.class fromJSONDictionary:JSONDict error:NULL];</span></code></pre></td></tr></table></div></figure>


<h2>Create JSON from model objects</h2>

<figure class='code'><div class="highlight"><table style="margin-top: 5px; margin-left: -15px;"><tr><td class="gutter"><pre></pre></td><td class='code'><pre><code class=''><span class='line'>// create NSDictionary from model class using MTLJSONSerialisation
</span><span class='line'>CATProfile *profile = ...
</span><span class='line'>NSDictionary *profileDict = [MTLJSONAdapter JSONDictionaryFromModel:profile];
</span><span class='line'>NSError *error = nil;
</span><span class='line'>// convert NSDictionary to JSON data
</span><span class='line'>NSData *JSONData = [NSJSONSerialization dataWithJSONObject:profileDict options:0 error:&error];</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Note：如果不想JSONData含有模型的某个属性，可以在模型JSONKeyPathsByPropertyKey方法中
    return @{ @&ldquo;Name&rdquo;: NSNull.null };</p></blockquote>

<h2>Serialize 序列化</h2>

<p>待续&hellip;</p>

<h2>优秀文章</h2>

<p><a href="http://spin.atomicobject.com/2014/06/23/ios-models-mantle/">Simplify iOS Models With Mantle – An Intro</a></p>

<p><a href="http://www.objc.at/mantle">mantle</a></p>

<p><a href="http://www.cnblogs.com/ipinka/p/4041835.html">iOS的Mantle实战</a></p>

<p><a href="http://ke.gitcafe.io/2014/10/13/Why-Changba-iOS-choose-Mantle/">为什么唱吧iOS 6.0选择了Mantle</a></p>
]]></content>
  </entry>
  
</feed>
