<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 内存管理 | Limon's Blog]]></title>
  <link href="http://limon.top/blog/categories/nei-cun-guan-li/atom.xml" rel="self"/>
  <link href="http://limon.top/"/>
  <updated>2016-05-24T18:56:51+08:00</updated>
  <id>http://limon.top/</id>
  <author>
    <name><![CDATA[Limon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[内存管理 - ARC]]></title>
    <link href="http://limon.top/nei-cun-guan-li-arc/"/>
    <updated>2015-01-22T18:20:16+08:00</updated>
    <id>http://limon.top/nei-cun-guan-li-arc</id>
    <content type="html"><![CDATA[<h2>什么是ARC</h2>

<p>Automatic Reference Counting，自动引用计数，即ARC。</p>

<p>在ARC下，不需用retain,release,autorelease,dealloc来管理内存，它提供了自动评估内存生存期的功能，并且在编译期间自动加入合适的管理内存的方法。编译器也会自动生成dealloc函数。</p>

<h3>ARC工作原理</h3>

<p>ARC并不是一项运行时的服务，实际上它是由Clang front-end提供的两段过程。下图演示了这两段过程。在front-end段时，Clang检查每个预处理文件的对象和属性。然后它跟据一些固定的规则将retain，release和autorelease语句加入其中。</p>

<blockquote><p>实际上，ARC在调用retain,release,autorelease,dealloc方法时，并不通过Objective-C消息派送机制，而是直接调用C。比如，ARC会调用与retain等价的objc_retain</p></blockquote>

<p><img src="http://limons-gitimage.stor.sinaapp.com/CFigure4.gif" alt="" /></p>

<p>举例来说：</p>

<ul>
<li>如果对象被分配内存并处于一个方法当中，它会在这个方法的结尾处获得一个release语句</li>
<li>如果是一个类属性，它的release语句会加入到类的dealloc方法中</li>
<li>如果这个对象是用来返回的或者它是一个容器对象，它会加入一个autorelease语句</li>
<li>如果这个对象是弱引用，把它放在一边不管它。</li>
</ul>


<blockquote><p>译于：<a href="http://www.drdobbs.com/mobile/automatic-reference-counting-on-ios/240000820">Automatic Reference Counting on iOS</a></p></blockquote>

<h3>代码演示</h3>

<h4>MRC下</h4>

<pre><code>@class Bar;
@interface Foo
{
@private
    NSString *myStr;
}
@property (readonly) NSString *myStr;

- (Bar *)foo2Bar:(NSString *)aStr;
- (Bar *)makeBar;
//...
@end


@implementation Foo;
@dynamic myStr;

– (Bar *)foo2Bar:(NSString *)aStr
{
    Bar *tBar;

    if (![self.myStr isEqualToString:aStr])
    {
        [aStr retain];
        [myStr release];
        myStr = aStr;
    }  
    return ([self makeBar]);
}

- (Bar *)makeBar
{
    Bar *tBar
    //...
    //... conversion code goes here
    //...
    [tBar autorelease];
    return (tBar);
}
//...

- (void)dealloc
{
    [myStr release];
    [super dealloc];
}
@end
</code></pre>

<h4>ARC下</h4>

<pre><code>@class Bar;
@interface Foo
{
@private
    NSString *myStr;
}
@property(readonly) NSString *myStr;

- (Bar *)foo2Bar:(NSString *)aStr;
- (Bar *)makeBar;
//...
@end


@implementation Foo;
@dynamic myStr;

– (Bar *)foo2Bar:(NSString *)aStr
{
    Bar *tBar;

    if (![self.myStr isEqualToString:aStr])
    {
        myStr = aStr;
    }  
    return ([self makeBar]);
}

- (Bar *)makeBar
{
    Bar *tBar
    //...
    //... conversion code goes here
    //...
    return (tBar);
}
//...
@end
</code></pre>

<blockquote><p>以上代码来源于：<a href="http://www.drdobbs.com/mobile/automatic-reference-counting-on-ios/240000820">Automatic Reference Counting on iOS</a></p></blockquote>

<h2>ARC下内存管理 &mdash; 内存管理语义</h2>

<p>ARC帮助我们解决90%内存管理为题，剩余的10%包括：</p>

<ul>
<li>属性(property)的内存管理语义是用strong、还是weak？</li>
<li>循环引用（retain cycle）问题</li>
<li>CoreFoundation对象不归ARC管理</li>
</ul>


<h3>属性</h3>

<p>属性(property)是Objective-C的一项特性，用于封装对象中的数据。Objective-C对象通常会把其所需要的数据保存为各种实例变量。实例变量一般通过getter、setter来访问。</p>

<p><code>@property(nonatomic, strong) NSArray *emailList;</code></p>

<p>此<code>@property</code>会自动生成三个东西：_emailList实例变量、getter、setter</p>

<p>属性用于封装数据，而数据则要有“具体的所有权语义”(concrete ownership semantic)，也称为内存管理语义。</p>

<p>回归本题，在ARC下，我们通常用<strong>内存管理语义</strong>来管理内存，下面这一组语义仅会影响setter。例如，用setter设定一个新值时，它是应该“保留”(retain)此值呢，还是只将其赋给底层实例变量就好？这些取决于你是用strong，还是copy，还是assign等</p>

<ul>
<li><p><code>assign</code>  对“纯量类型”(scalar type)的简单赋值</p>

<pre><code>  -(void)setState:(int)State{  
      _state = state;  
  }
</code></pre></li>
<li><p><code>unsafe_unretained</code>  此语义与<code>assign</code>相同，但是它适用于&#8221;对象类型&#8221;，该语义表达一种&#8221;非拥有关系&#8221;(unretained),当对象被销毁时，属性值不会自动清空(&ldquo;不安全&rdquo;,unsafe)，这一点与<code>weak</code>有区别</p></li>
<li><p><code>weak</code>  该语义表达一种&#8221;非拥有关系&#8221;，为这种属性设置新值时，设置方法既不保留新值，也不释放旧值，即仅作简单赋值，类似<code>assign</code>，当对象销毁，属性值被赋值为<code>nil</code></p></li>
<li><p><code>strong</code>  该语义表达一种&#8221;拥有关系&#8221;，为这种属性值设置新值时，设置方法会先保留新值，再释放旧值，最后把新值设置上去</p>

<pre><code>  -(void)setName:(NSArray *)emailList{    
      if ( emailList != _emailList){
          [emailList retain]; // 保留新值
          [_emailList release]; // 释放旧值
          _emailList = emailList;
      }   
  }
</code></pre></li>
</ul>


<p>此setter将保留新值并释放旧值，然后更新实例变量，令其指向新值。顺序很重要，假如两个值都指向对象A，还未保留新值就先把旧值释放了，那么先执行的release操作就可能导致对象A被回收，而后续的retain操作并无法令对象A复生，于是实例变量就成了悬挂指针</p>

<blockquote><p>当所指向的对象被释放或者收回，此情况下该指针便称悬垂指针（也叫迷途指针）。</p></blockquote>

<ul>
<li><p>copy  此语义与strong类似，不同在于setter并不保留新值，而是将其<code>copy</code>，如下：</p>

<pre><code>  @property (nonatomic, copy) NSString *name;

  -(void)setName:(NSString*)name{  
      if ( name != _name){  
          [_name release];
          _name = nil;
          _name = [name copy]; 
      }  
  }
</code></pre></li>
</ul>


<p>使用copy可以用来保护数据的封装性，比方说，传递过来的新值是一个NSMutableString的实例，此时若不<code>copy</code>，当设置完属性值之后，该可变新值在对象不知情的情况下遭人更改。所以，这时就要<code>copy</code>一份“不可变”(immutable)的字符串，确保对象中的字符串值不会不会无意间变动。</p>

<h3>ARC下内存管理 &mdash; 基本规则</h3>

<p>ARC下内存管理的一个基本规则：只要某个对象被任一strong指针指向，那么它将不会被回收。</p>

<h4>strong</h4>

<p>在MRC下，如果想令一个对象继续存活，需用retain来递增计数器，不过ARC已经在编译时帮我们加入了retain、release等，现在唯一需要的是，用一个强指针指向该对象，只要指针没有被空置，该对象会一直在堆上。</p>

<blockquote><p>实际上，不论MRC和ARC下，还是在用引用计数来管理内存，具体请看：<a href="http://limon-.github.io/blog/2015/01/13/nei-cun-guan-li-yin-yong-ji-shu-qi/">内存管理 - 引用计数器</a></p></blockquote>

<p>在默认情况下，所有的实例变量和局部变量都是strong类型的。可以说strong类型的指针在行为上和MRC时代的retain是比较相似的。</p>

<h4>weak</h4>

<p>weak常用在两个对象间存在包含关系时：对象A有一个strong指针指向对象B，并持有它，而对象B中也有一个weak指针指回对象B，从而避免了循环持有。</p>

<p>一个常见的例子就是delegate设计模式，viewController中有一个strong指针指向它所负责管理的UITableView，而UITableView中的dataSource和delegate指针都是指向viewController的weak指针。可以说，weak指针的行为和MRC时代的assign有一些相似点，但是考虑到weak指针更聪明些（会自动指向nil）</p>

<p><img src="http://limons-gitimage.stor.sinaapp.com/arcpic7.png" alt="" /></p>

<blockquote><p>代理模式可以简单认为，两个对象之间形成&#8221;半保留环&#8221;（A对象强指针指向B对象，B对象弱指针指向A对象）</p></blockquote>

<h3>ARC下内存管理 &mdash; 循环引用</h3>

<p>接下来简单讲讲容易循环引用的场景，详情请看<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html#//apple_ref/doc/uid/TP40011210-CH5-SW3">官方文档</a>的相关资料</p>

<h4>委托模式</h4>

<pre><code>@property (nonatomic,weak) id&lt;ComposeToolbarButtonTypeDelegate&gt; delegate; 
</code></pre>

<p>用<code>weak</code>形成“半保留环”，防止循环引用</p>

<h4>block</h4>

<p>这个网上大把，可以看看<a href="http://www.cnbluebox.com/?p=255">block使用小结、在arc中使用block、如何防止循环引用</a></p>

<h3>ARC下内存管理 &mdash; self</h3>

<p>ARC下，方法内的self既不是strong也不是weak，而是unsafe_unretained的（init系列方法的self除外）。
换而言之，在普通方法中，ARC不会对<code>self</code>做<code>retain</code>和<code>release</code>操作，生命周期全由调用方来决定，如果调用方没有保证<code>self</code>在被调用方法中的生命周期，可能在此方法中运行到一半，<code>self</code>就被释放了，可能程序就崩溃了。</p>

<h2>总结</h2>

<ul>
<li>ARC管理对象生命期的基本办法：在编译期间，在合适的地方插入<code>retain</code>和<code>release</code>操作</li>
<li>在ARC下，我们通常通过<code>内存管理语义</code>来管理内存，常见的有：<code>strong</code>、<code>weak</code>、<code>copy</code></li>
</ul>


<h2>番外</h2>

<p>研读了@sunny大大的<a href="http://blog.sunnyxx.com/2015/01/17/self-in-arc/">《ARC对self的内存管理》</a>之后作一些笔记，</p>

<h2>参考资料</h2>

<p><a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html">Objective-C Automatic Reference Counting (ARC)</a> &mdash;&ndash; 关于ARC的详细文档</p>

<p><a href="http://blog.sunnyxx.com/2015/01/17/self-in-arc/">ARC对self的内存管理</a> &mdash;&ndash; 专门对ARC下self的剖析</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[内存管理 - 引用计数]]></title>
    <link href="http://limon.top/nei-cun-guan-li-yin-yong-ji-shu-qi/"/>
    <updated>2015-01-13T14:27:14+08:00</updated>
    <id>http://limon.top/nei-cun-guan-li-yin-yong-ji-shu-qi</id>
    <content type="html"><![CDATA[<h2>内存管理概述</h2>

<p>在Objective-C中，系统并不会自动释放堆中的内存，其他高级语言C#、JAVA都有垃圾回收机制，但在Objective-C中并没有垃圾回收机制，那么Objective-C中的内存是如何管理？
Objective-C语言使用引用计数器来管理内存，每个对象都有个可以递增或递减的计数器。如果想使某个对象继续存活，那就递增其引用计数器；用完之后，就递减其计数器；当计数器为0，就表示没人关注此对象，此对象就会被销毁。</p>

<h2>引用计数工作原理</h2>

<p>在引用计数架构下，对象有个计数器，用以表示当前有多少个事物想令此对象继续存活。
NSObject协议声明了三个方法用于操作计数器</p>

<ul>
<li>Retain 递增计数器</li>
<li>Release 递减计数器</li>
<li>autorelease 待销毁autorelease pool时，再递减pool内的全部计数器</li>
</ul>


<p>1.对一个对象发送alloc、retain、new、copy消息，计数器 +1</p>

<p>2.对一个对象发送release消息，计数器 -1</p>

<p>3.当一个对象的引用计数器为0，对象就被回收(dealloced)，也就是说，系统会将对象其占用的内存标记为“可重用”(reuse)，放到“可用内存池”(avaiable pool)</p>

<h3>手动管理内存的三点原则</h3>

<ul>
<li>如果需要持有一个对象，那么对其发送retain</li>
<li>如果之后不再使用该对象，那么需要对其发送release（或者autorealse）</li>
<li>每一次对retain,alloc或者new的调用，需要对应一次release或autorealse调用</li>
</ul>


<h3>图表演示</h3>

<p>下图演示了一个对象自创建出来之后经历一次retain及两次release操作的过程</p>

<p><img src="http://limons-gitimage.stor.sinaapp.com/Memory.png" alt="Memory" /></p>

<p>下图所示的对象图中，ObjectB和ObjectC都引用了ObjectA，若B和C都不再使用A，则其计数器为0，便被回收。还有OrderObject想令B和C继续存活，而应用程序里又有另外的对象想令OrderObject继续存活，如果按“引用树“回溯，那么会发现一个“根对象”，在iOS中，则是UIApplication对象。此”根对象”是应用程序启动时创建的单例。</p>

<p><img src="http://limons-gitimage.stor.sinaapp.com/Memory-2.png" alt="Memory" /></p>

<h3>代码演示</h3>

<pre><code>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    NSMutableArray *array = [[NSMutableArray alloc] init];
    NSNumber *number = [[NSNumber alloc] initWithInt:1337]; 

    [array addObject:number]; //number的引用计数器+1（此时number的引用计数器至少为2）
    [number release]; // -1

    // do something with `array’

    [array release];
    return YES;
}
</code></pre>

<blockquote><p>在调用数组的<code>-addObject</code>方法时，数组也会在number上调用retain，以期令此对象存活</p></blockquote>

<h2>引用计数的应用场景</h2>

<p>在上面的代码演示中，还不看出引用计数的真正用处。在函数内使用一个临时的对象，通常不需要修改引用计数，只需在返回前将该对象销毁即可。
引用计数真正的应用场景是，用于对象之间传递和共享数据。</p>

<h2>引用计数的注意要点</h2>

<h3>retainCount可能永远不为0</h3>

<p>可能有人会测试对象释放时，看retainCount是否为0，代码如下：</p>

<pre><code>NSObject *object = [[NSObject alloc] init];
NSLog(@"%lu",(unsigned long)[object retainCount]);
[object release];
NSLog(@"%lu",(unsigned long)[object retainCount]);
</code></pre>

<p>但是，打印的结果是 1  1</p>

<p>最后一次输出，引用计数并没有变成0，原因是在最后一次 release 时，系统马上就回收了内存，就没有再将retainCount减1，因为不将值从1变成0，可以减少一次内存操作，加快对象的回收，只有在系统不打算这么优化时，计数值才会递减为0</p>

<h3>悬挂指针</h3>

<p>当所指向的对象被释放或者收回，此情况下该指针便称悬垂指针（也叫迷途指针）。</p>

<blockquote><p>某些编程语言允许未初始化的指针的存在，而这类指针即为野指针。</p></blockquote>

<p>为什么对象被回收了，向其发送消息不会崩？代码如下：</p>

<pre><code>NSNumber *number = [[NSNumber alloc] initWithInt:1337];

[number release];

NSLog(@"number = %@",number);
</code></pre>

<p>内存已经被回收，如果向其发送消息，可能使程序崩溃。为什么说“可能”，而没说“一定”，是因为对象的所占的内存在“解除分配”(deallocated)之后，只是放回了“可用内存池”(avaiable pool)。如果在执行NSLog时尚未覆写对象内存，那么该对象仍然有效。</p>

<blockquote><p>由此可见，因过早释放对象而导致的bug很难调试</p></blockquote>

<p>为了防止此情况的发送，一般release之后都会清空指针</p>

<pre><code>NSNumber *number = [[NSNumber alloc] initWithInt:1337];

[number release];
number = nil; 
</code></pre>

<blockquote><p>在Objective-C中，向nil发送消息不会出错。</p></blockquote>

<h2>总结</h2>

<ul>
<li>Objective-C通过<code>引用计数机制</code>来管理内存</li>
<li>对象创建之后，其引用计数器至少为1，<code>retain</code>和<code>release</code>分别会递增及递减计数器</li>
</ul>

]]></content>
  </entry>
  
</feed>
