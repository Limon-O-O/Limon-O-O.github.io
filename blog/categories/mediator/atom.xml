<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mediator | Limon's Blog]]></title>
  <link href="http://limon.top/blog/categories/mediator/atom.xml" rel="self"/>
  <link href="http://limon.top/"/>
  <updated>2017-03-15T22:10:23+08:00</updated>
  <id>http://limon.top/</id>
  <author>
    <name><![CDATA[Limon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一个仓库的模块化之路]]></title>
    <link href="http://limon.top/mediator/"/>
    <updated>2017-02-13T20:12:43+08:00</updated>
    <id>http://limon.top/mediator</id>
    <content type="html"><![CDATA[<h1>一个仓库的模块化之路</h1>

<p>本文对应的 GitHub 项目 <a href="https://github.com/Limon-O-O/Lego">Lego</a>，不定期更新实践感悟。</p>

<p>本文讲解的是如何在一个仓库进行模块化，当然，如果你想拆分一个模块对应一个仓库，也行，改改就是了。</p>

<p>建议先仔细阅读 Mr.Casa 的<a href="http://casatwy.com/modulization_in_action.html">《在现有工程中实施基于CTMediator的组件化方案》</a>，本文魔改于此。</p>

<p>本文要点：</p>

<ol>
<li>Swift 项目怎样使用 Mediator 进行模块化</li>
<li>使用 CocoaPods 管理模块</li>
<li>一键创建模块（包括 Xcode 工程），一键发布 <code>Pod库</code></li>
<li>发布私有库不使用 <code>pod repo push</code>，不进行验证，即使库编译不通过，也可以 release 新版本</li>
<li>Swift 的一些实践心得</li>
</ol>


<p>本文分为三部分：</p>

<p>一、<a href="https://github.com/Limon-O-O/Lego#%E4%B8%80lego-%E7%9B%AE%E5%BD%95%E8%A7%A3%E6%9E%90">目录解析</a></p>

<p>二、<a href="https://github.com/Limon-O-O/Lego#%E4%BA%8C%E5%AE%9E%E6%88%98">实战</a></p>

<p>三、<a href="https://github.com/Limon-O-O/Lego#%E4%B8%89%E5%AE%9E%E8%B7%B5%E5%BF%83%E5%BE%97">实践心得</a></p>

<p><br /></p>

<h2>一、Lego 目录解析</h2>

<pre><code>Lego
├── ConfigPrivatePod
├── Frameworks
│   ├── EggKit
│   ├── LegoKit
│   └── Networking
├── Modules
│   ├── CTMediator+Door
│   ├── Door
│   ├── Lego
└── Specs
    ├── EggKit
    ├── LegoKit
    └── Networking
        └── 1.0.1
            └── Networking.podspec
</code></pre>

<ol>
<li><code>ConfigPrivatePod</code> 文件夹，存放着配置私有模块的脚本</li>
<li><code>Frameworks</code> 文件夹，存放着各种 <code>framework</code>，<code>EggKit</code> 代表公司各项目通用库，<code>LegoKit</code> 代表本项目各模块通用库</li>
<li><code>Modules</code> 文件夹，存放着 <code>Lego</code> 项目的全部模块，其中 <code>Modules/Lego</code> 就是主模块</li>
<li><code>Specs</code> 文件夹，存放着 <code>framework</code> 和 <code>模块</code> 的版本的 <code>podName.podspec</code>，即常说的 <code>Private Spec Repo</code></li>
</ol>


<p><br /></p>

<h2>Config PrivatePod</h2>

<pre><code>ConfigPrivatePod
├── config.sh
└── pod-template
└── templates
    ├── Podfile
    ├── module
    │   ├── extension
    │   │   ├── Mediator+Project.swift
    │   │   └── ProjectProtocol.swift
    │   └── target
    │       └── Target_Project.swift
    ├── pod.podspec
    ├── release.sh
    ├── update_version.sh
    └── version_compare.sh
</code></pre>

<p><code>ConfigPrivatePod</code> 文件夹内含快速配置私有模块的脚本</p>

<p><code>config.sh</code> 新创建 <code>Pod库</code> 时使用，作用：</p>

<ol>
<li>创建 Xcode 工程（注：原理和 <code>pod lib create NAME</code> 一致）</li>
<li>为 <code>Pod库</code> 配置基本文件，如 <code>pod.podspec</code></li>
<li>配置 <code>release.sh</code> 脚步，需要为 <code>Pod库</code> 发布新版本时，直接敲命令 <code>./release.sh</code> 即可</li>
<li>为模块配置与 <code>Mediator</code> 关联的文件，如：<code>Target_Project.swift</code>, <code>ProjectProtocol.swift</code>, <code>Mediator+Project.swift</code></li>
</ol>


<p><br /></p>

<h2>关于 CocoaPods Specs</h2>

<p>大家都知道 CocoaPods 可以指定第三方依赖的版本，比如：<code>pod 'MonkeyKing', '~&gt; 1.2.1'</code></p>

<p>那 CocoaPods 是如何管理所有已经发布了的版本？
答案就在此 <a href="https://github.com/CocoaPods/Specs">CocoaPods Specs</a> 仓库。Specs 仓库里面存放着所有已经发布了的版本。</p>

<p>比如 MonkeyKing 的已发布的版本 <a href="https://github.com/CocoaPods/Specs/tree/master/Specs/f/6/5/MonkeyKing">Specs</a>，在此 <a href="https://github.com/CocoaPods/Specs/tree/master/Specs/f/6/5/MonkeyKing">Specs</a> 里面，列举 MonkeyKing 所有已经 released 的版本。</p>

<p>MonkeyKing 在 <code>Specs</code> 文件夹的呈现：</p>

<pre><code>└── Specs
    └── MonkeyKing
        └── 0.0.1
            └── MonkeyKing.podspec.json
        .......

        └── 0.9.3
            └── MonkeyKing.podspec.json
        └── 1.1.0
            └── MonkeyKing.podspec.json
        └── 1.2.0
            └── MonkeyKing.podspec.json
        └── 1.2.1
            └── MonkeyKing.podspec.json
        └── 1.2.2
            └── MonkeyKing.podspec.json
</code></pre>

<p><code>https://github.com/CocoaPods/Specs.git</code> 是 CocoaPods 官方的 <code>Specs</code> 仓库，平时我们用 <code>pod trunk push podName.podspec</code> 来发布新版本，其实就是向此仓库添加一个名为 <code>podName.podspec</code> 的文件。</p>

<p><a href="https://github.com/CocoaPods/Specs">CocoaPods Specs</a> 是线上版，在我们本地，其实也有这个仓库，执行下面的命令就可以看到，其中 <code>master</code> 对应 CocoaPods 官方的 <code>Specs</code> 仓库。
<code>
cd ~/.cocoapods/repos &amp;&amp; ls
</code></p>

<p>而在此教程的 <code>Lego</code> 仓库里，有一个文件夹 <a href="https://github.com/Limon-O-O/Lego/tree/master/Specs">Specs</a>，此文件夹里存放着 <code>framework</code> 和模块 Pod 的 <code>podspec</code>，相当于 Private Spec Repo</p>

<blockquote><p>更多详情请查看官方资料：<a href="https://guides.cocoapods.org/making/private-cocoapods.html">Private Pods</a></p></blockquote>

<p><br /></p>

<h2>二、实战</h2>

<h3>实战前夕</h3>

<ol>
<li><p>新建一个仓库，就先名为 <code>Lego</code>，页面先不急着关，打开 <code>Terminal</code></p></li>
<li><p><code>pod repo add [私有Pod源仓库名字] [私有Pod源的repo地址]</code>，添加私有源到本地</p></li>
<li><p>把刚刚新建的仓库 <code>clone</code> 到本地，把 <a href="https://github.com/Limon-O-O/Lego/tree/master/ConfigPrivatePod">ConfigPrivatePod</a> 文件夹放进去</p></li>
<li><p>在 <code>./ConfigPrivatePod/config.sh</code> 文件里，填写 <code>httpsRepo</code>, <code>sshRepo</code>, <code>specsRepo</code>, <code>homePage</code>, <code>author</code>, <code>email</code>，<a href="https://github.com/Limon-O-O/Lego/blob/master/ConfigPrivatePod/config.sh#L3">具体参考</a></p>

<blockquote><p>当然，在这里填写这4个默认参数的前提是，想把全部模块都放在同一个 <code>仓库</code> 里面，如果打算一个模块一个 <code>仓库</code>，请参考 Mr.Casa 的<a href="http://casatwy.com/modulization_in_action.html">《在现有工程中实施基于CTMediator的组件化方案》</a></p></blockquote></li>
<li><p>新建三个文件夹 <code>Frameworks</code> <code>Modules</code> <code>Specs</code>，最终的结构如下：</p></li>
</ol>


<pre><code>Lego
├── ConfigPrivatePod
│   ├── config.sh
│   └── templates
│   └── pod-template
│       ......
├── Frameworks
├── Modules
└── Specs
</code></pre>

<p><br /></p>

<h3>新建主模块和 Door 模块</h3>

<h5>主模块 &mdash; Lego</h5>

<p>使用 Xcode 创建一个名为 <code>Lego</code> 的工程，放在 <code>Lego/Modules</code> 下，此工程就是我们的主模块。</p>

<h5>Door 模块</h5>

<p>若想新建一个 Door 模块，需要两个 <code>Pod库</code>，
1. Door业务Pod
2. 方便其它模块调用 Door业务 的 Mediator+Door 的 Pod。</p>

<blockquote><p>这里多解释一句：Mediator+Door Pod 本质上只是一个方便方法，它对 Door Pod 不存在任何依赖</p></blockquote>

<p>开始创建：</p>

<ol>
<li>同创建主模块一样，创建一个名为 <code>Door</code> 的工程，放在 <code>Lego/Modules</code> 下，此模块主打<code>注册登录</code>。</li>
<li>再创建一个名为 <code>Mediator+Door</code> 的工程，同样放在 <code>Lego/Modules</code> 下，此工程主要为了方便其它模块调用 Door业务，本质就是通过 <code>Mediator</code> 利用<code>运行时</code>，找到在 <code>Door</code> 内相对应的方法。</li>
<li><p>在 <code>ConfigPrivatePod</code> 下，执行 <code>./config.sh</code>，脚本会问你要一些信息。</p>

<p> 配置 <code>Door</code> 工程：</p>

<pre><code class="`"> Enter Project Name: Door

 ================================================
  1 :  Module
 2 :  Extension
 3 :  Framework
 ================================================

 Enter Project Type Number: 1
</code></pre>

<p> 配置 <code>Mediator+Door</code> 工程：</p>

<pre><code class="`"> Enter Project Name: Door // 注：Project Name 也是 Door

 ================================================
 1 :  Module
 2 :  Extension
 3 :  Framework
 ================================================

 Enter Project Type Number: 2
</code></pre>

<blockquote><p>若配置模块工程，<code>Project Type Number</code> 输入 <code>1</code>，若配置 <code>模块Extension</code> 工程，输入 <code>2</code>，若配置普通的 <code>framework</code> 输入 <code>3</code></p></blockquote>

<p> 配置完 <code>Door</code> 工程后，在 <code>Modules/Door/Door</code> 下，会多了一个也同样名为 <code>Door</code> 的文件夹，以后所有需要打包出去给别人用的都在此文件夹下，因为在 <code>Door.podspec</code> 文件内定义的源文件就指指定了此文件夹。</p></li>
<li><p>打开 <code>Door.xcodeproj</code>，把 <code>Modules/Door/Door/Door</code> 此文件夹工程里面。 <code>Mediator+Door</code> 工程同理。</p>

<p> <code>Door</code> 工程的目录简如下：</p>

<pre><code class="`"> Door
 ├── Door
 │   └── Door
 │       ├── WelcomeViewController.swift
 │       └── Targets
 │           ├── Target_Door.swift
 ├── Door.xcodeproj
</code></pre>

<p> <code>Mediator+Door</code> 工程的目录简如下：</p>

<pre><code class="`"> Mediator+Door
 ├── Mediator+Door
 │   └── Mediator+Door
 │       ├── Door.swift
 │       ├── Mediator+Door.swift
 ├── Mediator+Door.xcodeproj
</code></pre></li>
</ol>


<p>到此，<code>Door模块</code> 基本配置完成，可以前往 <code>主模块Lego</code> 引入它了。</p>

<p><br /></p>

<h3>在主模块使用 Door 模块</h3>

<h5>在主模块引入 Door 模块</h5>

<p><code>Modules/Lego/Podfile</code>:</p>

<pre><code>source 'https://github.com/Limon-O-O/Lego.git' # 这是 Specs 仓库的地址，在本文中，和项目的仓库地址一致
source 'https://github.com/CocoaPods/Specs.git'
platform :ios, '9.0'

target 'Lego' do
    use_frameworks!

    # Door，在开发初期，先用相对路径，因为现在 CocoaPods 支持跨工程修改，便于开发
    pod "Mediator+Door", :path =&gt; "../Mediator+Door"
    pod "Door", :path =&gt; "../Door"

    # Me，若模块已经开发得差不多了，并 released 了，可从 Private Spec 拉取
    pod "Mediator+Me"
    pod "Me", '~&gt; 1.0.1'
end
</code></pre>

<h3>发布 Door 模块</h3>

<p>在 <code>Modules/Door</code> 下，敲命令 <code>./release.sh</code>，脚本会问你需要发布的版本号，仅需要输入一个版本号，其它的脚本都帮你做好了。</p>

<p>发布成功之后，还需要更新 <code>Private Spec</code>，命令：<code>pod repo update [Name]</code>，这个 <code>[Name]</code> 就是 <code>私有Pod源的名字</code>，在上面我们用命令 <code>pod repo add [私有Pod源仓库名字] [私有Pod源的repo地址]</code> 添加了的。也可以 <code>cd ~/.cocoapods/repos &amp;&amp; ls</code> 查看</p>

<p><code>release.sh</code> 主要作用有：</p>

<ol>
<li>更新 <code>Door.podspec</code></li>
<li>更新 <code>README.md</code></li>
<li>更新 <code>Info.plist</code> 的版本号</li>
<li>复制一份 <code>Door.podspec</code> 到 <code>Specs</code> 文件夹</li>
<li><code>git push</code> 相关变动到远程仓库</li>
</ol>


<p><br /></p>

<h2>三、实践心得</h2>

<ol>
<li><p><code>Networking</code>，分模块。各个模块的 API，分别写到相对应的模块，没有一个 <code>集约型</code> 的文件。</p></li>
<li><p><code>UserDefaults</code> 分模块，也稍微避免 <code>UserDefaults.standard</code> 存储大量数据之后，导致读写慢</p>

<pre><code class="`"> UserDefaults(suiteName: "top.limon.door")
 UserDefaults(suiteName: "top.limon.lego")
</code></pre>

<p> 如果模块之间需要传递 <code>UserDefaults</code> 的值，通过 <code>Mediator</code> 调度，不直接公开 <code>UserDefaults</code>。</p></li>
<li><p>通过 <code>Mediator</code> 传递的 <code>Data</code> 必须是 <code>NSObject</code>，不然崩溃</p>

<pre><code class="`"> extension Target_Door {

     func Action_DidLogin() -&gt; [String: Any] {
         return ["result": DoorUserDefaults.didLogin]
     }

     func Action_DidLogin() -&gt; Bool { // Bool 不是 NSObject，崩溃
         return true
     }
 }
</code></pre>

<p> 然并卵，<code>[String: Any]</code> 理论上是 <code>AnyObject</code>，但却不崩溃，难道自动转成了 <code>NSDictionary</code> ？</p>

<p> 如果返回 <code>Bool</code>，崩溃信息：<code>unrecognized selector sent to instance</code>，若想更深入探讨，可运行 <a href="https://github.com/Limon-O-O/Mediator">God项目</a> 进行测试</p></li>
<li><p>使用 <code>Mediator</code> 进行模块化，避免不了<code>Hard Code</code>，特别是在模块之间的通讯时，建议 <code>Hard Code</code> 尽量写在 <code>Extension</code> 内，比如 <code>Mediator+Door.swift</code> 的 <code>deliverParams</code> 的 <code>navigationBarHidden</code>, <code>callbackAction</code></p>

<pre><code class="`"> extension Door where Base: Mediator {

     public func welcomeViewController(_ navigationBarHidden: Bool = true, _ callbackAction: @escaping (([String: Any]) -&gt; Void)) -&gt; UIViewController? {
         let deliverParams: [String: Any] = ["navigationBarHidden": navigationBarHidden, "callbackAction": callbackAction]
         return base.performTarget("Door", action: "WelcomeViewController", params: deliverParams) as? UIViewController
     }
 }
</code></pre></li>
<li><p>使用 <code>Storyboard Reference</code> 连接其它模块的 <code>Storyboard</code>，注意 <code>Bundle</code> 的填写</p>

<p> <img src="https://ww4.sinaimg.cn/large/006tNbRwly1fd7jvecf8cj30e805mq3g.jpg" width="420"></p></li>
<li><p>使用 <code>Protocol</code> + <code>Extension</code> 更好地区分作用域，<code>Mediator.shared.door.accessToken()</code>，其中的 <code>door</code> 是不是挺好看的 🌝，而不是 <code>Mediator.shared.door_accessToken()</code></p></li>
<li><p>关于脚本创建 Xcode 工程，使用的是 <code>CocoaPods</code> 的 <a href="https://github.com/CocoaPods/pod-template">pod-template</a>，另外也可以使用 <a href="https://github.com/CocoaPods/Xcodeproj">Xcodeproj</a> 或 <a href="https://github.com/thoughtbot/liftoff">liftoff</a></p>

<blockquote><p>注：平时用 <code>pod lib create NAME</code> 创建 <code>pod</code>，就是拉取 <a href="https://github.com/CocoaPods/pod-template">pod-template</a> 来创建 Xcode 工程</p></blockquote>

<pre><code class="`"> pod lib create TestPod 
 Cloning `https://github.com/CocoaPods/pod-template.git` into `TestPod`.
 Configuring TestPod template.
</code></pre></li>
</ol>

]]></content>
  </entry>
  
</feed>
