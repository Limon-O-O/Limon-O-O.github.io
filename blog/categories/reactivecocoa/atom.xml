<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: reactivecocoa | Limon's Blog]]></title>
  <link href="http://limon.top/blog/categories/reactivecocoa/atom.xml" rel="self"/>
  <link href="http://limon.top/"/>
  <updated>2017-03-15T22:10:23+08:00</updated>
  <id>http://limon.top/</id>
  <author>
    <name><![CDATA[Limon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ReactiveCocoa]]></title>
    <link href="http://limon.top/reactivecocoa/"/>
    <updated>2014-09-03T17:44:25+08:00</updated>
    <id>http://limon.top/reactivecocoa</id>
    <content type="html"><![CDATA[<h1>ReactiveCocoa</h1>

<h2>RACSignal</h2>

<h3>订阅RACSignal</h3>

<p>1.RACSignal (Subscription)
RACSignal (Subscription)类别可以看到所有的订阅事件的方法，每个方法都会将类型为(void (^)(id x))的block作为参数，当事件发生时block中的代码会执行，例如-subscribeNext:方法会传入一个block作为参数，当Signal的next事件发出后，block会接收到事件并执行。</p>

<p>2.UIKit Category
RAC为UIKit添加了很多类别来让我们可以订阅UI组件的事件，比如UITextField (RACSignalSupport)中的rac_textSignal会在文本域内容变化时发出next事件。
事件包含的内容可以是类型，只要是对象就行，如果是一些数字，布尔值等字面量，可以用@()语法装箱成NSNumber。</p>

<h3>操纵Signal</h3>

<h5>1.RACStream (Operations)</h5>

<p><code>-filter</code>:uses a block to test each value. Returns a new stream with only those values that passed.</p>

<pre><code>- (instancetype)filter:(BOOL (^)(id value))block;
    RACSequence *numbers = [@"1 2 3 4 5 6 7 8 9" componentsSeparatedByString:@"     "].rac_sequence;

// Contains: 2 4 6 8
RACSequence *filtered = [numbers filter:^ BOOL (NSString *value) {
    return (value.intValue % 2) == 0;
}];
</code></pre>

<p><code>-map</code>:Maps block across in the receiver , and transform the values. Returns a new stream with the mapped values.</p>

<pre><code>- (instancetype)map:(id (^)(id value))block;
    RACSequence *letters = [@"A B C D E F G H I" componentsSeparatedByString:@"     "].rac_sequence;

// Contains: AA BB CC DD EE FF GG HH II
RACSequence *mapped = [letters map:^(NSString *value) {
    return [value stringByAppendingString:value];
}];
</code></pre>

<p><code>-flattenMap</code>:Maps block across the values in the receiver and flattens the result. It is used to signal of signal.简单理解为：取出内部的Signal.</p>

<pre><code>[[[self.signInButton
    rac_signalForControlEvents:UIControlEventTouchUpInside]
        map:^id(id x) {
            return [self signInSignal]; // 此signal内含一个BOOL signal
    }]
    subscribeNext:^(id x) {
        NSLog(@"Sign in result: %@", x);
}];
</code></pre>

<p>打印出来的不是BOOL，<code>-subscribeNex</code>t: will execute the block whenever the signal sends a value. 但这value不包括 signal of signals：an outer signal that contains an inner signal.</p>

<pre><code>2014-01-08 21:00:25.919 RWReactivePlayground[33818:a0b] Sign in result: 
                        &lt;RACDynamicSignal: 0xa068a00&gt; name:+createSignal:
</code></pre>

<pre><code>[[[self.signInButton
   rac_signalForControlEvents:UIControlEventTouchUpInside]
   flattenMap:^id(id x) { // subscribe to the inner signal within the outer signal’s
     return [self signInSignal];
   }]
   // Output: Sign in result: 0
   subscribeNext:^(id x) {
     NSLog(@"Sign in result: %@", x);
   }];
</code></pre>

<h4>2.RACSignal (Operations)</h4>

<h2>RACObserve</h2>

<pre><code>// When self.username changes, logs the new name to the console.
//
// RACObserve(self, username) creates a new RACSignal that sends the current
// value of self.username, then the new value whenever it changes.
// -subscribeNext: will execute the block whenever the signal sends a value.
[RACObserve(self, username) subscribeNext:^(NSString *newName) {
    NSLog(@"%@", newName);
}];
</code></pre>

<h4>过滤signal</h4>

<pre><code>// Only logs names that starts with "j".
//
// -filter returns a new RACSignal that only sends a new value when its block
// returns YES.
[[RACObserve(self, username)
    filter:^(NSString *newName) {
        return [newName hasPrefix:@"j"];
    }]
    subscribeNext:^(NSString *newName) {
        NSLog(@"%@", newName);
}];
</code></pre>

<h2>Chip</h2>

<p><code>distinctUntilChanged</code>：Returns a stream of values for which -isEqual: returns NO when compared to the previous value.
用来确保signal只会发送不同的值,比较数值流中当前值和上一个值，如果不同，就返回当前值，简单理解,它将这一次的值与上一次做比较，当相同时（也包括- isEqual:）被忽略掉。</p>

<pre><code>RACSignal *validSearchSignal =
[[RACObserve(self, searchText)
  map:^id(NSString *text) {
     return @(text.length &gt; 3);
  }]
  distinctUntilChanged]; // ensure this signal only emits values when the state changes.

[validSearchSignal subscribeNext:^(id x) {
    NSLog(@"search text is valid %@", x);
}];

self.executeSearch =
[[RACCommand alloc] initWithEnabled:validSearchSignal // validSearchSignal决定button能不能点击
  signalBlock:^RACSignal *(id input) {
    return  [self executeSearchSignal];
  }];
</code></pre>

<p>例子二：比如UI上一个Label绑定了一个值，根据值更新显示的内容:</p>

<pre><code>RAC(self.label, text) = [RACObserve(self.user, username) distinctUntilChanged];
self.user.username = @"sunnyxx"; // 1st
self.user.username = @"sunnyxx"; // 2nd
self.user.username = @"sunnyxx"; // 3rd 
</code></pre>

<p>所以，对于相同值可以忽略的情况，果断加上它吧。</p>

<p><code>-takeUntilBlock</code>：对于每个next值，运行block，当block返回YES时停止取值，如：</p>

<pre><code>[[self.inputTextField.rac_textSignal takeUntilBlock:^BOOL(NSString *value) {
    return [value isEqualToString:@"stop"];
}] subscribeNext:^(NSString *value) {
    NSLog(@"current value is not `stop`: %@", value);
}];
</code></pre>

<blockquote><p>Note：停止取值的意思是，输入stop之后，无论输入什么都不会再取值，即输入stop之后，不会再有任何输出。
还有一个例子：</p></blockquote>

<pre><code>- (RACSignal*) rac_RequestStateSignal
{
    return [[RACObserve(self, state)
        takeUntilBlock:^ BOOL (NSNumber *state){
            return [state intValue] == iRequestStateComplete;
        }]
        flattenMap:^(NSNumber *state){
            if ([state intValue] == iRequestStateErrored)
            { 
                // Create a meaningful NSError here if you can.
                return [RACSignal error:nil];
            }
            else
            { 
                return [RACSignal return:state];
            }
        }];
}
</code></pre>

<p><code>-switchToLatest</code>方法用于signal-of-signals，它总是输出最新的信号的值。</p>

<pre><code>RACSubject *letters = [RACSubject subject];
RACSubject *numbers = [RACSubject subject];
RACSubject *signalOfSignals = [RACSubject subject];

RACSignal *switched = [signalOfSignals switchToLatest];

// Outputs: A B 1 D
[switched subscribeNext:^(NSString *x) {
    NSLog(@"%@", x);
}];

[signalOfSignals sendNext:letters]; // 打印letters信号内的值
[letters sendNext:@"A"];
[letters sendNext:@"B"];

[signalOfSignals sendNext:numbers]; // 打印numbers信号内的值
[letters sendNext:@"C"];
[numbers sendNext:@"1"];

[signalOfSignals sendNext:letters]; // 打印letters信号内的值
[numbers sendNext:@"2"];
[letters sendNext:@"D"];
</code></pre>

<p><code>-rac_signalForSelector:fromProtocol:</code></p>

<p>这个方法主要是把 protocal 转为一个 Signal 便于使用。值得注意的是这个函数返回的是一个 RACTuple。 这个 RACTuple 包含了 Selector 方法里面所有的参数</p>

<p><code>-rac_liftSelector:withSignalsFromArray:</code>
这个方法它的意思是当传入的 Signals 都至少sendNext过一次，接下来只要其中任意一个signal有了新的内容。就会去触发第一个 selector 参数的方法。</p>

<blockquote><p><a href="http://iiiyu.com/2014/12/26/learning-ios-notes-thirty-six/">ReactiveCocoa 用 RACSignal 替代 Delegate</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactiveCocoa的三种基本的模式]]></title>
    <link href="http://limon.top/reactivecocoa/"/>
    <updated>2014-06-10T09:35:03+08:00</updated>
    <id>http://limon.top/reactivecocoa</id>
    <content type="html"><![CDATA[<h1>ReactiveCocoa</h1>

<hr />

<h3>三种基本的模式</h3>

<p>在ReactiveCocoa中有三种基本的模式：责任链、分割和组合模式（chaining, splitting, and combining）。</p>

<h4>一、 Chaining模式</h4>

<p>Chaining，将一个已有的signal转换为一个新的signal。常用的操作是创建一个新的signal，再对它使用filter:、map:或startWith:等方法。</p>

<pre><code>RAC(self.textField.text) = [[[RACSignal interval:1] startWith:[NSDate date]] map:^id(NSDate *value) {  
    NSDateComponents *dateComponents = [[NSCalendar currentCalendar] components:NSMinuteCalendarUnit | NSSecondCalendarUnit fromDate:value];  

    return [NSString stringWithFormat:@"%d:%02d", dateComponents.minute, dateComponents.second];  
}]; 
</code></pre>

<p>我们将textFiled的text属性绑定为三个串连的signals的结果。首先，我们创建一个间隔信号，这个信号每隔一秒钟就发送当前时间。间隔信号在没有启动的时候是不会有值的，所以我们使用startWith:启动起来。最后，使用map:将signal的NSDate值转换为一个NSString字符串，这个字符串将会被赋值到textField的text属性上。
<img src="http://teehanlax.com.s3.amazonaws.com/wordpress/wp-content/uploads/chaining.png" alt="Chaining" /></p>

<p> Chaining是最常用的操作，而且它通常不使用局部变量，而是像上面那样串连起来操作。下面的代码与上面的代码是等同的。</p>

<pre><code>RACSignal *intervalSignal = [RACSignal interval:1];  
RACSignal *startedIntervalSignal = [intervalSignal startWith:[NSDate date]];  
RACSignal *mappedIntervalSignal = [startedIntervalSignal map:^id(NSDate *value) {  
    NSDateComponents *dateComponents = [[NSCalendar currentCalendar] components:NSMinuteCalendarUnit | NSSecondCalendarUnit fromDate:value];  

    return [NSString stringWithFormat:@"%d:%02d", dateComponents.minute, dateComponents.second];  
}];  

RAC(self.textField.text) = mappedIntervalSignal;  
</code></pre>

<h4>二、Splitting模式</h4>

<p>Splitting与chaining比较类似，也是将signal转换为其它的sginal，不同之处在于，Splitting会重复使用signal。Splitting看起来要复杂些，其实也就是一个signal使用多次。</p>

<pre><code>RACSignal *dateComponentsSignal = [[[RACSignal interval:1] startWith:[NSDate date]] map:^id(NSDate *value) {  
    NSDateComponents *dateComponents = [[NSCalendar currentCalendar] components:NSMinuteCalendarUnit | NSSecondCalendarUnit fromDate:value];  
    return dateComponents;  
}];  

RAC(self.minuteTextField.text) = [dateComponentsSignal map:^id(NSDateComponents *dateComponents) {  
    return [NSString stringWithFormat:@"%d", dateComponents.minute];  
}];  

RAC(self.secondTextField.text) = [dateComponentsSignal map:^id(NSDateComponents *dateComponents) {  
    return [NSString stringWithFormat:@"%d", dateComponents.second];  
}];  
</code></pre>

<p>在上面这个例子中，创建了一个signal，即局部变量：dateComponentsSignal。接着再用dateComponentsSignal创建两个新的signal，并将它们分别与两个textfield的text属性进行绑定。</p>

<blockquote><p>Note: 把dateComponentsSignal看作一个局部变量，就像,int a = 9; 然后多次使用a来计算。</p></blockquote>

<p><img src="http://teehanlax.com.s3.amazonaws.com/wordpress/wp-content/uploads/Splitting.png" alt="Splitting" /></p>

<h4>三、Combining模式</h4>

<p>combining就是将几个signal结合起来创建出一个新的signal。比如“登录”按钮，只有在“用户名”与“密码”输入框中的文本长度都超过6时才能被点击，否则处于不可用的状态。那么我们可以为“登录”按钮的enabled状态创建一个signal，这个signal则是由“用户名”与“密码”框它们两个自己的signal组合起来：</p>

<pre><code>RAC(self.submitButton.enabled) = [RACSignal combineLatest:@[self.usernameField.rac_textSignal, self.passwordField.rac_textSignal] reduce:^id(NSString *userName, NSString *password) {  
    return @(userName.length &gt;= 6 &amp;&amp; password.length &gt;= 6);  
}]; 
</code></pre>

<p>在这里，我们将“登录”按钮的enable状态绑定到使用combineLatest:reduce:方法创建的signal上。这个方法的第二个参数是一个block，这个block的参数是combineLatest中的参数的<strong>最新值</strong>的组合。我们将两个文本框的text signal一起传到combineLatest，在reduce的block中，该block也就会接收到两个NSString的参数，这个block的工作就是将两个参数值组合起来生成一个值，然后返回。该方法的说明：</p>

<pre><code>// +combineLatest:reduce: takes an array of signals, executes the block with the
// latest value from each signal whenever any of them changes, and returns a new
// RACSignal that sends the return value of that block as values.
</code></pre>

<p><img src="http://teehanlax.com.s3.amazonaws.com/wordpress/wp-content/uploads/combining.png" alt="Combining" /></p>

<p>Combining常用于两种情况：</p>

<ol>
<li>需要同时满足多种条件。</li>
<li>在多个signal中进行选择。</li>
</ol>


<h2>优秀文章</h2>

<p><a href="http://www.teehanlax.com/blog/getting-started-with-reactivecocoa/">Getting Started with ReactiveCocoa</a></p>
]]></content>
  </entry>
  
</feed>
