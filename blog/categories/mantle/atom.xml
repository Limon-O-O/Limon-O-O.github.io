<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mantle | Limon's Blog]]></title>
  <link href="http://devinwadsworth.com/blog/categories/mantle/atom.xml" rel="self"/>
  <link href="http://devinwadsworth.com/"/>
  <updated>2015-12-23T05:09:57+08:00</updated>
  <id>http://devinwadsworth.com/</id>
  <author>
    <name><![CDATA[Limon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[玩转Mantle]]></title>
    <link href="http://devinwadsworth.com/blog/2014/04/23/mantlede-shi-yong/"/>
    <updated>2014-04-23T10:05:15+08:00</updated>
    <id>http://devinwadsworth.com/blog/2014/04/23/mantlede-shi-yong</id>
    <content type="html"><![CDATA[<h2>MTLModel</h2>

<p>MTLModel provides an easy way to map NSDictionary objects to Objective-C classes and vice-versa.</p>

<p>假设返回的JSON为：</p>

<pre><code> {
  "uid": 1,
  "title": "Found a bug",
  "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
  "number": 1347,
  "state": "open",
  "user": {
    "login": "octocat",
    "id": 1
  },
  "assignee": {
    "login": "octocat",
    "id": 1,
    "type": "User"
  }
  "created_at": "2011-04-22T13:33:48Z",
  "awesome": true  
}
</code></pre>

<p>继承<code>MTLModel</code>遵守<code>&lt;MTLJSONSerializing&gt;</code>协议</p>

<pre><code>#import &lt;Mantle.h&gt;

typedef enum : NSUInteger {
    GHIssueStateOpen,
    GHIssueStateClosed
} GHIssueState;

@interface GHIssue : MTLModel&lt;MTLJSONSerializing&gt;
@property (nonatomic, copy, readonly) NSNumber *uid;
@property (nonatomic, copy, readonly) NSURL *URL;
@property (nonatomic, copy, readonly) NSNumber *number;
@property (nonatomic, assign, readonly) GHIssueState state;
@property (nonatomic, copy, readonly) NSString *reporterLogin;
@property (nonatomic, copy, readonly) NSDate *updatedAt;
@property (nonatomic, strong, readonly) GHUser *assignee;
@property(nonatomic, getter=isAwesome) BOOL awesome;
@property (nonatomic, copy) NSString *title;
</code></pre>

<p><code>&lt;MTLJSONSerializing&gt;</code>协议告诉Mantle序列化该对象如何从JSON映射到Objective-C的属性。</p>

<h3>NSValueTransformer</h3>

<p>在.m文件，实现<code>&lt;MTLJSONSerializing&gt;</code>的协议<code>@required</code>的方法<code>+ (NSDictionary *)JSONKeyPathsByPropertyKey</code>
它指明了如何把json的keypath和Model的属性对应起来</p>

<pre><code>+ (NSDictionary *)JSONKeyPathsByPropertyKey {
    // properties defined in header  :  key in JSON Dictionary，本地字段在前，服务端字段在后
    return @{
        @"URL": @"url",
        @"HTMLURL": @"html_url",
        @"reporterLogin": @"user.login",
        @"assignee": @"assignee",
        @"updatedAt": @"updated_at"
    };
}
</code></pre>

<p>因为如果属性名和JSON的键名一致时，可以省略不写映射，例如title</p>

<p>以上分了几种情况：
Mantle使用主要看属性property中的类型，主要分几种：</p>

<ol>
<li>NSNumber、NSString&hellip;.</li>
<li>NSArray</li>
<li>NSURL</li>
<li>NSDate</li>
<li>枚举</li>
<li>模型</li>
<li>BOOL</li>
</ol>


<p>先介绍一个方法：<code>+ (NSValueTransformer *)JSONTransformerForKey:(NSString *)key</code></p>

<pre><code>// Specifies how to convert a JSON value to the given property key. If
// reversible, the transformer will also be used to convert the property value
// back to JSON.
//
// If the receiver implements a `+&lt;key&gt;JSONTransformer` method, MTLJSONAdapter
// will use the result of that method instead.
//
// Returns a value transformer, or nil if no transformation should be performed.
+ (NSValueTransformer *)JSONTransformerForKey:(NSString *)key;
</code></pre>

<p>以下方法的命名都要遵从：<code>SEL selector = MTLSelectorWithKeyPattern(key, "JSONTransformer");</code></p>

<p>1、一般像tittle，<code>@"title": @"title"</code>不用写这行也自动转化。我个人认为从服务器返回的所有数据都是字符串类型。所有理论上，uid还要用<code>NSValueTransformer</code>转化，如下：</p>

<pre><code>+ (NSValueTransformer *)uidJSONTransformer{
    return [MTLValueTransformer reversibleTransformerWithForwardBlock:^id(NSString *string) {
    return @([string integerValue]);
} reverseBlock:^id(NSNumber *number) {
    return [number stringValue];
}];
</code></pre>

<p>}</p>

<p>但是，如果你的uid属性类型定义为NSNumber，还是不需用上面的方法，应该是Mantle自己处理了。</p>

<blockquote><p>如果你定义的uid类型为NSUInteger，还是需要uidJSONTransformer</p></blockquote>

<p>还有一种情况是<code>@"reporterLogin": @"user.login"</code>
   login是在JSON内层的元素，需要用下面这个方法</p>

<pre><code class="```">   + (NSValueTransformer *)reporterLoginJSONTransformer {
        return [MTLValueTransformer reversibleTransformerWithForwardBlock:^(NSArray *values) {
            return [values firstObject];
        } reverseBlock:^(NSString *str) {
            return @[str];
        }];
    }
</code></pre>

<p>2、NSArray装模型</p>

<pre><code>{
  name: "Bob",
  cars: [
    { make: "ford", year: "1972" },
    { make: "mazda", year: "2000" }
  ],
}
</code></pre>

<pre><code>@interface CarModel : MTLModel

@property (nonatomic, strong) NSString *make;
@property (nonatomic, strong) NSString *year;

@end

@interface PersonModel : MTLModel

@property (nonatomic, strong) NSString *name;
@property (nonatomic, strong) NSArray *cars; // NSArra元素是Car模型

@end
</code></pre>

<pre><code>+ (NSValueTransformer *)carsJSONTransformer {
    return [NSValueTransformer mtl_JSONArrayTransformerWithModelClass:CarModel.class];
}
</code></pre>

<p>3、NSURL</p>

<pre><code>+ (NSValueTransformer *)URLJSONTransformer {
    return [NSValueTransformer valueTransformerForName:MTLURLValueTransformerName];
}           
</code></pre>

<p>4、NSDate</p>

<pre><code>
+ (NSDateFormatter *)dateFormatter {
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    dateFormatter.locale = [[NSLocale alloc] initWithLocaleIdentifier:@"en_US_POSIX"];
    dateFormatter.dateFormat = @"yyyy-MM-dd'T'HH:mm:ss'Z'";
    return dateFormatter;
}

+ (NSValueTransformer *)updatedAtJSONTransformer { // 把"updated_at": "2011-04-22T13:33:48Z"传给ForwardBlock
    return [MTLValueTransformer reversibleTransformerWithForwardBlock:^(NSString *str) {
        return [self.dateFormatter dateFromString:str]; // 把dateFormatter再传给reverseBlock
    } reverseBlock:^(NSDate *date) {
        return [self.dateFormatter stringFromDate:date];
    }]
}
</code></pre>

<p>如果JSON的数据格式是Unix时间戳，&#8221;date&#8221;: 1418202490,</p>

<pre><code>+ (NSValueTransformer *)dateJSONTransformer {
    return [MTLValueTransformer reversibleTransformerWithForwardBlock:^(NSString *str) {
        return [NSDate dateWithTimeIntervalSince1970:str.floatValue];
    } reverseBlock:^(NSDate *date) {
        return [NSString stringWithFormat:@"%f",[date timeIntervalSince1970]];
    }];
}
</code></pre>

<p>5、枚举</p>

<pre><code>+ (NSValueTransformer *)stateJSONTransformer {
    return [NSValueTransformer mtl_valueMappingTransformerWithDictionary:@{
        @"open": @(GHIssueStateOpen),
        @"closed": @(GHIssueStateClosed)
    }];
}
</code></pre>

<p>6、模型</p>

<pre><code>+ (NSValueTransformer *)assigneeJSONTransformer {
    return [NSValueTransformer mtl_JSONDictionaryTransformerWithModelClass:GHUser.class];
}
</code></pre>

<p>7、 BOOL</p>

<pre><code>+ (NSValueTransformer *)awesomeJSONTransformer {
    return [NSValueTransformer valueTransformerForName:MTLBooleanValueTransformerName];
}
</code></pre>

<h2>空对象处理</h2>

<p>在模型.m文件添加<code>-setNilValueForKey</code>，Mantle是基于KVC给property赋值的，KVC提供了<code>-setNilValueForKey</code>方法，让我们为nil指定一个合理的替代值</p>

<pre><code>@interface MTLModel (KTVNullableScalar)
@end
@implementation MTLModel (KTVNullableScalar)
- (void)setNilValueForKey:(NSString *)key {
    [self setValue:@0 forKey:key];  // For NSInteger/CGFloat/BOOL
}
@end
</code></pre>

<h2>Create model objects from JSON</h2>

<pre><code>// create NSDictionary from JSON data
NSData JSONData = ... // the JSON response from the API
NSError *error = nil;
NSDictionary *JSONDict = [NSJSONSerialization JSONObjectWithData:JSONData options:0 error:&amp;error];

// create model object from NSDictionary using MTLJSONSerialisation
CATProfile *profile = [MTLJSONAdapter modelOfClass:CATProfile.class fromJSONDictionary:JSONDict error:NULL];
</code></pre>

<h2>Create JSON from model objects</h2>

<pre><code>// create NSDictionary from model class using MTLJSONSerialisation
CATProfile *profile = ...
NSDictionary *profileDict = [MTLJSONAdapter JSONDictionaryFromModel:profile];
NSError *error = nil;
// convert NSDictionary to JSON data
NSData *JSONData = [NSJSONSerialization dataWithJSONObject:profileDict options:0 error:&amp;error];
</code></pre>

<blockquote><p>Note：如果不想JSONData含有模型的某个属性，可以在模型JSONKeyPathsByPropertyKey方法中
    return @{ @&ldquo;Name&rdquo;: NSNull.null };</p></blockquote>

<h2>Serialize 序列化</h2>

<p>待续&hellip;</p>

<h2>优秀文章</h2>

<p><a href="http://spin.atomicobject.com/2014/06/23/ios-models-mantle/">Simplify iOS Models With Mantle – An Intro</a></p>

<p><a href="http://www.objc.at/mantle">mantle</a></p>

<p><a href="http://www.cnblogs.com/ipinka/p/4041835.html">iOS的Mantle实战</a></p>

<p><a href="http://ke.gitcafe.io/2014/10/13/Why-Changba-iOS-choose-Mantle/">为什么唱吧iOS 6.0选择了Mantle</a></p>
]]></content>
  </entry>
  
</feed>
